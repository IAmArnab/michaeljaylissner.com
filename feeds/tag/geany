<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Michael Jay Lissner</title><link href="https://michaeljaylissner.com/" rel="alternate"></link><link href="https://michaeljaylissner.com/feeds/tag/geany" rel="self"></link><id>https://michaeljaylissner.com/</id><updated>2010-08-11T12:07:23-07:00</updated><entry><title>Using Pylint inÂ Geany</title><link href="https://michaeljaylissner.com/posts/2010/08/11/using-pylint-in-geany/" rel="alternate"></link><updated>2010-08-11T12:07:23-07:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2010-08-11:posts/2010/08/11/using-pylint-in-geany/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.logilab.org/857"&gt;Pylint&lt;/a&gt; is a tool that tells you 
when your Python code is broken or when it has coding problems. As a newish 
Python coder, using it has taught me a lot about conventions, 
and has helped to make my code significantly cleaner. Enabling it in my &lt;span class="caps"&gt;IDE&lt;/span&gt;,
 &lt;a href="http://www.geany.org/"&gt;Geany&lt;/a&gt;, makes it so that using it is 
 just another part of my development&amp;nbsp;workflow. &lt;/p&gt;
&lt;p&gt;Enabling Pylint in Geany is easy. Simply open Geany, and create a new build 
command that uses &lt;code&gt;pylint -r no "%f"&lt;/code&gt; as the command, and &lt;code&gt;(W|E|F):([0-9]+):
(.*)&lt;/code&gt; as the error regular expression. After you&amp;#8217;ve done this, 
using this build command instead of saving your work will run Pylint on your
 current file, showing you warnings, errors and fatal errors in&amp;nbsp;red.&lt;/p&gt;</summary><category term="Python"></category><category term="pylint"></category><category term="geany"></category></entry></feed>