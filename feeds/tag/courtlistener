<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Michael Jay Lissner</title><link href="https://michaeljaylissner.com/" rel="alternate"></link><link href="https://michaeljaylissner.com/feeds/tag/courtlistener" rel="self"></link><id>https://michaeljaylissner.com/</id><updated>2014-11-06T00:00:00-08:00</updated><entry><title>Updating Bulk Data in CourtListener…Again</title><link href="https://michaeljaylissner.com/posts/2014/11/06/updating-bulk-data-in-courtlistener-more/" rel="alternate"></link><updated>2014-11-06T00:00:00-08:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2014-11-06:posts/2014/11/06/updating-bulk-data-in-courtlistener-more/</id><summary type="html">&lt;p&gt;I &lt;a href="https://michaeljaylissner.com/posts/2014/09/28/updating-bulk-data-in-courtlistener/"&gt;wrote a few weeks ago&lt;/a&gt; about our new system for creating &lt;a href="https://www.courtlistener.com/api/bulk-info/"&gt;bulk files in CourtListener&lt;/a&gt;. The system was pretty good. The goal was and is to efficiently create one bulk file for every jurisdiction&amp;#8212;object pair in the system. So, that means one bulk file for oral arguments from Supreme Court, another for opinions from the Ninth Circuit of Appeals, another for dockets from Alabama&amp;#8217;s appellate court, etc. We have about 350 jurisdictions and four different object types right now, for a total of about 1,400 bulk&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;This system needs to be&amp;nbsp;fast.&lt;/p&gt;
&lt;p&gt;The old system that I wrote about before would create 350 open file handles at a time, and then would iterate over each item in the database, adding it to the correct file as it inspected the item. This was a beautiful system because it only had to iterate over the database once, but even after &lt;a href="https://github.com/freelawproject/courtlistener/commit/a0e4326d98e9f501ec3e69955d6b5650471686e8"&gt;performance tuning&lt;/a&gt;, it still took about 24 hours. Not good&amp;nbsp;enough. &lt;/p&gt;
&lt;p&gt;I got to thinking that it was terrible to create the entire bulk archive over and over when in reality only a few items change each day. So I created a &lt;a href="https://github.com/freelawproject/courtlistener/issues/293"&gt;bug to make bulk data creation incremental&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This post is about that&amp;nbsp;process.&lt;/p&gt;
&lt;h2 id="the-first-approach"&gt;The First&amp;nbsp;Approach&lt;/h2&gt;
&lt;p&gt;The obvious way to do this kind of thing is to grab the bulk files you already have (as gz-compressed tar files), and add the updated items to those files. Well, I wrote up code for this, tested it pretty thoroughly and considered it done. Only to realize that, like regular files, when you create a compressed tar file with a command like&amp;nbsp;this&amp;#8230;   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tar_files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tarfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;all.tar.gz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;w:gz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#8230;it clobbers any old files that might have the same name. So much for&amp;nbsp;that.&lt;/p&gt;
&lt;h2 id="next-approach"&gt;Next&amp;nbsp;Approach&lt;/h2&gt;
&lt;p&gt;Well, it looked like we needed append mode for compressed tar files, but alas, from &lt;a href="https://docs.python.org/3/library/tarfile.html"&gt;the documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that &amp;#8216;a:gz&amp;#8217;, &amp;#8216;a:bz2&amp;#8217; or &amp;#8216;a:xz&amp;#8217; is not&amp;nbsp;possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;a:gz&amp;#8221; means a gz-compressed tar file in &lt;strong&gt;a&lt;/strong&gt;ppend mode, so much for that idea.&amp;nbsp;Next! &lt;/p&gt;
&lt;h2 id="next-approach_1"&gt;Next&amp;nbsp;Approach&lt;/h2&gt;
&lt;p&gt;Well, you can&amp;#8217;t make gz-compressed tar files in append mode, but you can create tar files in append mode as step one, then compress them as step two. I tried this next, and again, it looked like it was working&amp;#8230;until I realized that my tar files contained copy after copy after copy of each file. I was hoping that it&amp;#8217;d simply clobber files that were previously in the file, but instead it was just putting multiple files of the same name into the&amp;nbsp;tar. &lt;/p&gt;
&lt;p&gt;Perhaps I can delete from the tar file before adding items back to it? &lt;a href="http://bytes.com/topic/python/answers/40408-deleting-tarfile"&gt;Nope, that&amp;#8217;s not possible either&lt;/a&gt;. Next&amp;nbsp;idea?&lt;/p&gt;
&lt;h2 id="final-approach"&gt;Final&amp;nbsp;Approach&lt;/h2&gt;
&lt;p&gt;I was feeling pretty frustrated by now, but there was one more approach, and that was to add an intermediate step. Instead of creating the tar files directly in Python, I could save the individual &lt;code&gt;json&lt;/code&gt; files I was previously putting into the tar file to disk, then create the compressed tar files directly from those once they&amp;#8217;re all created. We proved earlier that Python has no issues about clobbering items on disk, so that&amp;#8217;ll work nicely for incremental bulk files, which will just clobber old versions of the&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;From performance analyses of the code, most of the bottleneck is in serializing &lt;span class="caps"&gt;JSON&lt;/span&gt;, so this will change it so that gets done at most once per item in the database and then most of the remaining work will be making tar files and gz-compressing&amp;nbsp;them. &lt;/p&gt;
&lt;h2 id="whew"&gt;Whew!&lt;/h2&gt;
&lt;p&gt;I was hoping that I would be able to easily update items inside a compressed tar file, or even inside an uncompressed tar file, but that doesn&amp;#8217;t seem&amp;nbsp;possible. &lt;/p&gt;
&lt;p&gt;I was hoping that I could create these files while iterating over the database, as described in the first approach, but that&amp;#8217;s not doable&amp;nbsp;either. &lt;/p&gt;
&lt;p&gt;At the end of the day, the final method is just to write things to disk. Simple beats complicated this time, even when it comes to&amp;nbsp;performance. &lt;/p&gt;</summary><category term="Bulk Data"></category><category term="CourtListener"></category></entry><entry><title>Creating a Non-Profit</title><link href="https://michaeljaylissner.com/posts/2014/10/14/becoming-a-non-profit/" rel="alternate"></link><updated>2014-10-14T00:00:00-07:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2014-10-14:posts/2014/10/14/becoming-a-non-profit/</id><summary type="html">
&lt;h2 id="updates"&gt;Updates&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://codefordc.org/blog/2016/11/17/start-nonprofit.html"&gt;Code for &lt;span class="caps"&gt;DC&lt;/span&gt; has written a similar post&lt;/a&gt; for creating a non-profit in &lt;span class="caps"&gt;D.C.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-goal"&gt;The Goal&lt;/h2&gt;
&lt;p&gt;This post is an attempt to document the things that we’ve done at &lt;a href="https://free.law"&gt;Free Law Project&lt;/a&gt; to get our official Federal and State non-profit status. This has been a grueling process for Brian and me but as we announced on Twitter, we now have it officially in hand, and likely in record time:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;This isn't tax advice, but we're happy to announce the &lt;span class="caps"&gt;IRS&lt;/span&gt; approved our 501(c)(3) app, so donations are deductible! &lt;a href="https://t.co/UjaBgSJorr"&gt;https://t.co/UjaBgSJorr&lt;/a&gt;&lt;/p&gt;— Free Law Project (@FreeLawProject) &lt;a href="https://twitter.com/FreeLawProject/status/520620527963369472"&gt;October 10, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" charset="utf-8" src="//platform.twitter.com/widgets.js"&gt;&lt;/script&gt;
&lt;p&gt;Check out &lt;a href="https://free.law/pdf/006-non-profit-status-letter-redacted.pdf"&gt;this beauty&lt;/a&gt;! We’re finally the real deal.&lt;/p&gt;
&lt;p&gt;All through the process, I wished there was something that had all the documentation of the process, so this is my attempt at such a post. I’m writing this after the fact, so I expect that I’ll munge a few details. If you catch me making a mistake, you can either &lt;a href="https://github.com/mlissner/michaeljaylissner.com/edit/master/content/on-memory.md"&gt;edit this page&lt;/a&gt; yourself using &lt;a href="https://michaeljaylissner.com/posts/2014/10/06/editing-on-github-a-non-technical-explainer/"&gt;my handy guide&lt;/a&gt;, or you can &lt;a href="https://michaeljaylissner.com/contact"&gt;send me a note&lt;/a&gt; and I’ll update it. &lt;/p&gt;
&lt;h2 id="before-we-begin"&gt;Before We Begin&lt;/h2&gt;
&lt;p&gt;Three notes before we begin:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Our complete &lt;span class="caps"&gt;IRS&lt;/span&gt; packet &lt;a href="https://free.law/pdf/irs-1023-free-law-project.pdf"&gt;is available&lt;/a&gt;. Please feel free to take a look.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The very best resource we found for this was &lt;a href="http://www.publiccounsel.org/tools/assets/files/0027.pdf"&gt;a checklist&lt;/a&gt; from Public Counsel which reads like this blog post if it were written by qualified lawyers.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nothing here, there, or anywhere is tax advice or legal advice or advice in any way, period. This is an overview of the process as we understand it. It might work for you, it might not. We’re not tax or &lt;span class="caps"&gt;IRS&lt;/span&gt; experts. Hell, I’m not even a lawyer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-overall-process"&gt;The Overall Process&lt;/h2&gt;
&lt;p&gt;Here are the major steps for California and Federal recognition:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reserve the name of your organization with the Secretary of State&lt;/li&gt;
&lt;li&gt;Check for trademarks on your organization name&lt;/li&gt;
&lt;li&gt;Get an &lt;span class="caps"&gt;EIN&lt;/span&gt; from the &lt;span class="caps"&gt;IRS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Get official with the Secretary of State of California&lt;ol&gt;
&lt;li&gt;Write Bylaws&lt;/li&gt;
&lt;li&gt;Write Articles of Incorporation&lt;/li&gt;
&lt;li&gt;Write Conflict of Interest and Ethics Policy&lt;/li&gt;
&lt;li&gt;Hold a meeting creating directors (and having them resign as incorporators, if necessary)&lt;/li&gt;
&lt;li&gt;Hold a meeting to ratify and adopt everything above&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;File Statement of Information with Secretary of State&lt;/li&gt;
&lt;li&gt;Register with the California Attorney General’s registry of charitable trusts&lt;/li&gt;
&lt;li&gt;Get Federal recognition as a 501(c)(3)&lt;ol&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRS&lt;/span&gt;-1023&lt;/li&gt;
&lt;li&gt;Your organization’s press coverage&lt;/li&gt;
&lt;li&gt;Your homepage&lt;/li&gt;
&lt;li&gt;Articles of Incorporation stamped by the State Secretary&lt;/li&gt;
&lt;li&gt;Phone a friend&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;File for California tax exemption&lt;/li&gt;
&lt;li&gt;Get Municipal recognition&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="reserve-your-name-with-the-secretary-of-state"&gt;Reserve Your Name with the Secretary of State&lt;/h2&gt;
&lt;p&gt;This is an important step if you think somebody else might already have your name or if you think it might get scooped up before you finish your paperwork. This is your opportunity to say that your organization is named such-and-such and nobody else can have that name.&lt;/p&gt;
&lt;p&gt;More information about this can be &lt;a href="http://www.sos.ca.gov/business/be/name-availability.htm"&gt;found on the Secretary of State’s website&lt;/a&gt;. The process involves downloading &lt;a href="http://www.sos.ca.gov/business/corp/pdf/naavreservform.pdf"&gt;a form&lt;/a&gt;, filling it out, mailing it in, and then waiting for a reply. Once you get the reply, the name is yours for 60 days. This is probably also a good time to…&lt;/p&gt;
&lt;h2 id="check-for-trademarks"&gt;Check for Trademarks&lt;/h2&gt;
&lt;p&gt;If you think the name of your organization might be a trademark, you should check &lt;a href="http://tess2.uspto.gov/bin/gate.exe?f=tess&amp;amp;state=4802:wiyhnl.1.1"&gt;the &lt;span class="caps"&gt;USPTO&lt;/span&gt;’s trademark database&lt;/a&gt; to see if it is. If so, it’s probably wise to re-think the name of your organization. Naming your organization the Nike Charitable Trust probably won’t work out well for you.&lt;/p&gt;
&lt;h2 id="get-an-ein"&gt;Get an &lt;span class="caps"&gt;EIN&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This is the official step that’s required to incorporate your organization and it’s a fairly easy one. Once this is done you’ll have an Employer Identification Number (&lt;span class="caps"&gt;EIN&lt;/span&gt;) from the &lt;span class="caps"&gt;IRS&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;To do this, there is &lt;a href="http://www.irs.gov/Businesses/Small-Businesses-&amp;amp;-Self-Employed/Apply-for-an-Employer-Identification-Number-%28EIN%29-Online"&gt;a multi-step form on the &lt;span class="caps"&gt;IRS&lt;/span&gt; website&lt;/a&gt;. Work your way through it, and if you come out the other side, you’ll quickly be the owner of a freshly minted &lt;span class="caps"&gt;EIN&lt;/span&gt;. &lt;a href="http://www.taxanalysts.com/www/features.nsf/Articles/E76DFBC8665E47B185257B1D006B1656?OpenDocument"&gt;Keep it private, as you would an &lt;span class="caps"&gt;SSN&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="get-official-with-california"&gt;Get Official with California&lt;/h2&gt;
&lt;p&gt;At this point, you’ve moved past the easy stuff. It’s time for the weird and difficult paperwork.&lt;/p&gt;
&lt;h3 id="write-bylaws-articles-of-incorporation-and-conflict-of-interest-and-ethics-policy"&gt;Write Bylaws, Articles of Incorporation and Conflict of Interest and Ethics Policy&lt;/h3&gt;
&lt;p&gt;Writing these three items is a very persnickety part of the process. Each item &lt;em&gt;must&lt;/em&gt; include certain phrases and failure to include those phrases will sink any attempt to get 501(c)(3) status down the road. The template we used for each of these was created by &lt;a href="http://www.publiccounsel.org"&gt;Public Counsel&lt;/a&gt; and can be downloaded from their website (&lt;a href="http://www.publiccounsel.org/publications?id=0060"&gt;Bylaws&lt;/a&gt;, &lt;a href="http://www.publiccounsel.org/publications?id=0059"&gt;Articles of Incorporation&lt;/a&gt;, &lt;a href="http://www.publiccounsel.org/publications?id=0061"&gt;Ethics Policy&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;The best process we discovered for this was to very carefully work our way through each template and to update any section that needed it. The &lt;a href="https://free.law/pdf/Articles_of_Incorporation_and_Bylaws.pdf"&gt;result&lt;/a&gt; clocks in at 25 pages for the Bylaws and Articles of Incorporation and ten pages for the  Conflict of Interest and Ethics Policy.&lt;/p&gt;
&lt;h3 id="hold-some-meetings"&gt;Hold Some Meetings&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, you’ve got your name, &lt;span class="caps"&gt;EIN&lt;/span&gt;, Bylaws, Articles of Incorporation and  Conflict of Interest and Ethics Policy all ready. Now what? Well, now we enter the portion of the process that involves magic and wizardry. What we do now is we hold two meetings. Feel free to chant during these meetings if that helps them make sense.&lt;/p&gt;
&lt;p&gt;The first meeting serves the purpose of creating directors and having them resign as incorporators, if necessary. To have this meeting, get all of your incorporators and directors together and decide to make it so. Have your secretary keep minutes from the meeting. You’ll need them for the 501(c)(3). &lt;a href="https://free.law/pdf/003-minutes_incorporators.pdf"&gt;Here are ours&lt;/a&gt; and &lt;a href="http://www.publiccounsel.org/tools/assets/files/mins_incorp.doc"&gt;here’s the template we used&lt;/a&gt;. You can see how this might feel a bit like voodoo magic if your board of directors is the same group of people as your incorporators (as in our case) — One minute they’re incorporators, the next they’re directors, and the people that authorized the switch are themselves.&lt;/p&gt;
&lt;p&gt;The second meeting is where the real business goes down. Here you adopt all of the paperwork you created above, establish bank accounts, etc. Again, we used the templates from Public Counsel to keep minutes for this meeting. &lt;a href="https://free.law/pdf/004-mins_1st_bd_mtg-signed.pdf"&gt;Check out our minutes for details&lt;/a&gt; and &lt;a href="http://www.publiccounsel.org/tools/assets/files/mins_1st_bd_mtg.doc"&gt;here’s a template&lt;/a&gt;. You’ll also see in our minutes a waiver of notice that waives the director’s normal requirement to tell people about the meeting in advance.&lt;/p&gt;
&lt;p&gt;These two meetings can (and probably will) take place back to back, but they need to have &lt;em&gt;separate&lt;/em&gt; minutes and need to be &lt;em&gt;separate&lt;/em&gt; meetings. This is because until the board adopts themselves in the first meeting, they can’t very well do the things in the second meeting. Voodoo? Perhaps. &lt;/p&gt;
&lt;h3 id="file-statement-of-information-with-secretary-of-state-of-california"&gt;File Statement of Information with Secretary of State of California&lt;/h3&gt;
&lt;p&gt;Within 90 days of when you filed your original Articles of Incorporation, you need to take all of the above and send it into the secretary of state along with the &lt;a href="http://www.sos.ca.gov/business/corp/pdf/so/corp_so100.pdf"&gt;&lt;span class="caps"&gt;SI&lt;/span&gt;-100 form&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;If you do all of this well and properly, you’ll soon be registered with the State of California, but until you get your 501(c)(3) pushed through you can’t become an official California non-profit, so you’ll have to hold on for a bit for that piece of the puzzle. More on this in a moment.  &lt;/p&gt;
&lt;h3 id="register-with-the-california-attorney-general"&gt;Register with the California Attorney General&lt;/h3&gt;
&lt;p&gt;Another thing you’ve got to do, once you’ve got state recognition is to register with the California Attorney General. You have 30 days to do this from the moment when you first had assets as an organization. Be swift.&lt;/p&gt;
&lt;p&gt;To do this, there are &lt;a href="http://oag.ca.gov/sites/all/files/agweb/pdfs/charities/charitable/initialReg.pdf"&gt;instructions on the Attorney General’s website&lt;/a&gt;, and there’s &lt;a href="http://oag.ca.gov/sites/all/files/agweb/pdfs/charities/charitable/ct1-form.pdf"&gt;a &lt;span class="caps"&gt;PDF&lt;/span&gt; that you need to complete&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="get-federal-recognition"&gt;Get Federal Recognition&lt;/h2&gt;
&lt;p&gt;If you’ve come this far, you’re actually doing pretty well, but it’s time to find a good fortifying drink, because it’s about to get worse. Much worse. Our operating theory is that the &lt;span class="caps"&gt;IRS&lt;/span&gt; makes this hard because they simply don’t like giving tax exemptions — it’s antithetical to their whole raison d’être. But be that as it may, we must persevere if we’re going to make our organization a 501(c)(3). &lt;/p&gt;
&lt;p&gt;So, what’s this process look like? &lt;/p&gt;
&lt;p&gt;Well, there are really only two forms that you need to worry about. The first is the &lt;a href="http://www.stayexempt.irs.gov/StartingOut/InteractiveForm1023Application.aspx"&gt;&lt;span class="caps"&gt;IRS&lt;/span&gt;-1023&lt;/a&gt; and the second is the &lt;a href="http://www.stayexempt.irs.gov/checklist.pdf"&gt;checklist for the &lt;span class="caps"&gt;IRS&lt;/span&gt;-1023&lt;/a&gt;. That should tell you something about the process you’re about to engage in: There’s a form for the form. Oh, and that’s not all: there’s a &lt;a href="http://www.stayexempt.irs.gov/StartingOut/InteractiveForm1023Application.aspx"&gt;web form&lt;/a&gt; for the form for the form. Also, the &lt;span class="caps"&gt;IRS&lt;/span&gt;-1023 is an &lt;em&gt;interactive&lt;/em&gt; &lt;span class="caps"&gt;PDF&lt;/span&gt; with parts that appear and disappear as you complete it. Also it crashes sometimes (save often!), can only be opened in Adobe Reader and there are three versions of the form and two different revisions. Dizzy yet?&lt;/p&gt;
&lt;p&gt;Let’s see if I can simplify this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;span class="caps"&gt;IRS&lt;/span&gt;-1023 from December 2013 is currently the main form you want  — it’s long and has a lot of questions. It is available in three forms: Interactive (recommended), Regular (no interactive stuff), and Accessible (even less interactive stuff?). You only seem to be able to get this form if you answer &lt;a href="http://www.stayexempt.irs.gov/StartingOut/InteractiveForm1023Application.aspx"&gt;a bunch of questions aimed at prepping you for the process&lt;/a&gt;. Even then it gives you a zip containing the form, sigh.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;/li&gt;
&lt;li&gt;The 1023 checklist &lt;em&gt;must&lt;/em&gt; be included in your submission as a table of contents of sorts. The &lt;a href="http://www.stayexempt.irs.gov/checklist.pdf"&gt;newest one I’ve found&lt;/a&gt; is from June 2006.&lt;/li&gt;
&lt;li&gt;There are copious resources online to help you complete these forms. The ones we used were &lt;a href="http://form1023.org/"&gt;form1023.org&lt;/a&gt;, the &lt;a href="http://www.irs.gov/instructions/i1023/index.html"&gt;&lt;span class="caps"&gt;IRS&lt;/span&gt;’s own documentation&lt;/a&gt;, and the &lt;span class="caps"&gt;IRS&lt;/span&gt;’s &lt;a href="http://www.irs.gov/Charities-&amp;amp;-Non-Profits/Frequently-Asked-Questions-about-Form-1023"&gt;&lt;span class="caps"&gt;FAQ&lt;/span&gt; for the form&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, you’ve got your forms, let’s talk a bit about the packet you’re going to send to the &lt;span class="caps"&gt;IRS&lt;/span&gt;. The best place to begin understanding the packet is by looking at the checklist we just downloaded. In addition to the items mentioned above, it also requests a number of new items we haven’t seen before. Most of these won’t be necessary for most non-profits, but one is new and worth mentioning: the Expedite Request.&lt;/p&gt;
&lt;h3 id="getting-expedited"&gt;Getting Expedited&lt;/h3&gt;
&lt;p&gt;As we’ve come to understand it, there are essentially three queues your paperwork can fall into at the &lt;span class="caps"&gt;IRS&lt;/span&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The urgent queue (30 days?)&lt;/li&gt;
&lt;li&gt;The normal queue (90 days?) and &lt;/li&gt;
&lt;li&gt;The troublemaker queue (&amp;gt; 90 days / Never)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your goal is to fall into one of the first two queues. If you fall into the third, it’s possible you’ll never come out the other side. &lt;a href="http://blogs.gnome.org/jnelson/2014/06/30/the-new-501c3-and-the-future-of-free-software-in-the-united-states/"&gt;Seriously&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;If you want to fall into the first queue, you need to complete an Expedite Request. These are actually pretty straightforward, but you need to qualify. You can see an example of our Expedite Request in our &lt;a href="https://free.law/pdf/irs-1023-free-law-project.pdf"&gt;1023 submission&lt;/a&gt;, but basically, you need to state specific harm that will occur if your organization doesn’t get swift 501(c)(3) processing. There are &lt;a href="http://www.irs.gov/Charities-&amp;amp;-Non-Profits/Applying-for-Exemption:-Expediting-Application-Processing"&gt;guides about this on the &lt;span class="caps"&gt;IRS&lt;/span&gt; website&lt;/a&gt; that we used (successfully, we believe). &lt;/p&gt;
&lt;p&gt;Getting faster processing is great but it’s not always possible. Failing that, the thing to do is make sure that you don’t fall into the third queue. &lt;/p&gt;
&lt;p&gt;I think the important parts of this are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Carefully follow &lt;a href="http://www.irs.gov/instructions/i1023/index.html"&gt;the instructions provided by the &lt;span class="caps"&gt;IRS&lt;/span&gt; for the 1023&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Make sure that your articles of incorporation contain the proper purpose and dissolution clauses (they will if you use the templates).&lt;/li&gt;
&lt;li&gt;Check the &lt;a href="http://www.irs.gov/Charities-&amp;amp;-Non-Profits/Top-Ten-Reasons-for-Delays-in-Processing-Exempt-Organization-Applications"&gt;top ten list&lt;/a&gt; provided by the &lt;span class="caps"&gt;IRS&lt;/span&gt; for speeding up the process.&lt;/li&gt;
&lt;li&gt;Do &lt;em&gt;not&lt;/em&gt; mention any of &lt;a href="https://en.wikipedia.org/wiki/IRS_targeting_controversy"&gt;cursed words&lt;/a&gt; on the &lt;span class="caps"&gt;IRS&lt;/span&gt;’s list to “Be On the Look Out” for (So-called &lt;span class="caps"&gt;BOLO&lt;/span&gt; words).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The list is apparently no longer in use due to the furor it caused, but it’s still instructive to know what was on it. For example, in our case “Open Source” was on the list, so despite working in the open (something we believe contributes to our educational purpose), we had to be very careful never to mention that in our mission or anywhere else just to ensure there were no misunderstandings.&lt;/p&gt;
&lt;p&gt;Once you’ve got your Expedite Request completed, it’s time to work on the 1023 itself. This is a long and arduous process that is too detailed to get into. Be careful, be thorough, follow the guides, and get help from a friend or lawyer. We found it to be incredibly useful to get somebody with experience to carefully look at our paperwork.&lt;/p&gt;
&lt;h3 id="other-things-we-sent-the-irs"&gt;Other Things We Sent the &lt;span class="caps"&gt;IRS&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;In addition to the items mentioned above, we also included printed copies of a partnership agreement we have with Princeton for the hosting of &lt;span class="caps"&gt;RECAP&lt;/span&gt;, a printed selection of press, and printed copies of our homepages (&lt;span class="caps"&gt;RECAP&lt;/span&gt;, CourtListner, Free Law Project).&lt;/p&gt;
&lt;p&gt;The goal of these enclosures was mostly to keep the &lt;span class="caps"&gt;IRS&lt;/span&gt; reviewer from touching their computer, but also to keep their life as simple as possible. Like any application, you want to control the information that is provided to the reviewer. Just like you wouldn’t want your next boss seeing your Facebook profile, you don’t want the &lt;span class="caps"&gt;IRS&lt;/span&gt; reviewer looking up your organization’s website. There’s likely nothing bad for them to see, but you want to keep things as simple as possible. Maybe, we reason, if we provide a printed copy of our homepage they won’t bother booting up their computer. Perhaps.   &lt;/p&gt;
&lt;h3 id="remarks-on-formatting-etc"&gt;Remarks on Formatting, Etc.&lt;/h3&gt;
&lt;p&gt;Sadly, like &lt;a href="http://www.aarongreenspan.com/writing/20130217/petitioning-rube-goldbergs-supreme-court/"&gt;filing with the Supreme Court&lt;/a&gt;, completing your 1023 involves a few formatting and clerical details that we must attend to. First you must be sure to put your name and &lt;span class="caps"&gt;EIN&lt;/span&gt; on the top of every page. This is suprisingly difficult since many of the pages are PDFs you don’t control, but you can pull it off if you try by feeding your printed documents through the printer twice. The first time, you print the regular stuff, the second time you print a blank page over and over that contains your &lt;span class="caps"&gt;EIN&lt;/span&gt; and organization name in the header. Fun.&lt;/p&gt;
&lt;p&gt;The second thing to attend to is the ordering of the documents themselves. This is the order of our 1023, and from what we can tell, you really shouldn’t do anything much different:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1023 Checklist&lt;/li&gt;
&lt;li&gt;Request for Expedited Processing&lt;/li&gt;
&lt;li&gt;List of Enclosures&lt;/li&gt;
&lt;li&gt;The 1023 itself&lt;/li&gt;
&lt;li&gt;Articles of Incorporation&lt;/li&gt;
&lt;li&gt;Bylaws&lt;/li&gt;
&lt;li&gt;Supplemental answers to 1023 questions&lt;/li&gt;
&lt;li&gt;Conflict of Interest and Ethics Policy&lt;/li&gt;
&lt;li&gt;Minutes adopting Conflict of Interest and Ethics Policy (remember when we made these?)&lt;/li&gt;
&lt;li&gt;A partnership agreement we have with Princeton&lt;/li&gt;
&lt;li&gt;Our selection of press coverage&lt;/li&gt;
&lt;li&gt;Printed copies of our homepages&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRS&lt;/span&gt; Form &lt;span class="caps"&gt;SS&lt;/span&gt;-4 indicating our &lt;span class="caps"&gt;EIN&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In total: 83 pages of delightful paperwork and one check for $850.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Total weight: 3/4 lbs." src="https://michaeljaylissner.com/images/forming-a-non-profit/three-quarter-pounder.jpeg"/&gt;&lt;/p&gt;
&lt;h2 id="file-california-tax-exemption-forms"&gt;File California Tax Exemption Forms&lt;/h2&gt;
&lt;p&gt;If all goes well, you’ll soon hear back from the &lt;span class="caps"&gt;IRS&lt;/span&gt; and be granted your Federal recognition as a 501(c)(3). Congratulations on a hard-won victory. &lt;/p&gt;
&lt;p&gt;Now that that’s in place, it’s time to switch back to California and wrap things up with them. To do this you need to complete form 3500A (&lt;a href="https://www.ftb.ca.gov/businesses/Exempt_organizations/Applying_for_tax-exemption.shtml"&gt;information&lt;/a&gt; / &lt;a href="https://www.ftb.ca.gov/forms/misc/3500a.pdf"&gt;download&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;Don’t try to save this form. You can’t:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Go F*** Yourself -- You cannot save this file." src="https://michaeljaylissner.com/images/forming-a-non-profit/cannot-save-pdf.png"/&gt;&lt;/p&gt;
&lt;p&gt;Instead, fill it out, print it, and mail it in along with a copy of your Federal Recognition. If you can print to &lt;span class="caps"&gt;PDF&lt;/span&gt;, that &lt;em&gt;might&lt;/em&gt; save your work.&lt;/p&gt;
&lt;h2 id="get-municipal-recognition"&gt;Get Municipal Recognition&lt;/h2&gt;
&lt;p&gt;The final step of this process for us, though it might come much earlier
for you, was to get in touch with the city where we incorporated and to
tell them that we exist. We tried to do this early on and had the city
staff member in charge of business licenses tell us to come back once we
had 501(c)(3) recognition. In the city we selected non-profits are
exempt from city business license fees, so that may be why they were so
lax about the timing of this paperwork. You may find in your city that
they want you to have a business license and pay related fees while
you’re waiting on 501(c)(3) status (and sometimes even after).&lt;/p&gt;
&lt;h2 id="wrapping-up"&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;All in all, that’s the basic process of creating a non-profit and getting tax exemption from the feds, the state and your city. Most of this went pretty smoothly, but the most difficult part was by far the &lt;span class="caps"&gt;IRS&lt;/span&gt;-1023, and even that we were able to get our results back in about 30 days. This  feels like something of a miracle, but it took us over a year to get all the paperwork completed and submitted. &lt;/p&gt;
&lt;p&gt;In the end I liken the process to an incantation of a magic spell: Done correctly, you wind up with a massive pile of paperwork that magically looks like a bad-ass application for tax-exempt status that washes over anybody that looks at it, convincing him or her that your organization is charitable and deserves tax exemption in a forthright manner. &lt;/p&gt;
&lt;p&gt;Done incorrectly, you enter a hole of despair, despondency and, worse, taxation.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Yes, PDFs are &lt;a href="http://stackoverflow.com/a/10548893/64911"&gt;generally compressed internally&lt;/a&gt;. &lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="IRS"></category><category term="IRS-1023"></category><category term="Non-Profit"></category><category term="CourtListener"></category><category term="Free Law Project"></category><category term="Forms"></category></entry><entry><title>Editing a File on Github</title><link href="https://michaeljaylissner.com/posts/2014/10/06/editing-on-github-a-non-technical-explainer/" rel="alternate"></link><updated>2014-10-06T00:00:00-07:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2014-10-06:posts/2014/10/06/editing-on-github-a-non-technical-explainer/</id><summary type="html">
&lt;p&gt;When writing programs, developers have a choice of whether they want their work to be public or private. Programs that are made public are called “open source” and ones that are not are called “closed source”. In both cases the developer can share a program with the world as a website or iPhone app, or whatever, but in the case where the code is shared publicly it’s &lt;em&gt;also&lt;/em&gt; possible for anybody anywhere in the world to change the program to make it better. (For more detail on this and other jargon, see the &lt;a href="#some-definitions"&gt;definitions at the end&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;This is very cool! &lt;/p&gt;
&lt;p&gt;But I hear you asking, “How do I, a non-developer, make use of this system to make the world a better place?” I’m glad you asked — this article is for you.&lt;/p&gt;
&lt;h2 id="and-then-there-was-git"&gt;And then there was Git&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://git-scm.com/"&gt;Git&lt;/a&gt; is an extremely popular system that developers use to keep track of the code they write. The main thing it does is make it so that two developers can work on the same file, track their individual changes and then combine their work, as you might do in Microsoft Word. Since all programs are just collections of lots of files that are together known as a “repository”, this lets a number of developers work together without tramping on each others changes.&lt;/p&gt;
&lt;p&gt;There are a million ways to use Git but lately a lot of people use Git through a website called &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;. Github makes it super-easy to use Git, but you still need to understand a few steps that are necessary to make changes. The basic steps we’ll take are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You: Find the file&lt;/li&gt;
&lt;li&gt;You: Change the file and save your changes&lt;/li&gt;
&lt;li&gt;You: Create a pull request&lt;/li&gt;
&lt;li&gt;The manager (me or somebody else): Merges the pull request, making your changes live&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the purpose of this article, I’ve created a new repository as a playground where you can try this out. &lt;/p&gt;
&lt;p&gt;The playground is here: &lt;a href="https://github.com/mlissner/git-tutorial/tree/master"&gt;https://github.com/mlissner/git-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go check out the playground and create a Github account, then come back here and continue to the next step, changing a file. &lt;/p&gt;
&lt;h2 id="make-your-change"&gt;Make your change&lt;/h2&gt;
&lt;p&gt;Like the rest of this, the process of making a change is actually pretty easy. All you have to do is find the file, make your change, and then save it. So:&lt;/p&gt;
&lt;h3 id="find-the-file"&gt;Find the file&lt;/h3&gt;
&lt;p&gt;When you look at &lt;a href="https://github.com/mlissner/git-tutorial/tree/master"&gt;the playground&lt;/a&gt;, you’ll see a bunch of files like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="File List" src="https://michaeljaylissner.com/images/github/file-list.png"/&gt;&lt;/p&gt;
&lt;p&gt;Click the file you want to edit. In this case, it’s we’ll actually be changing file called “your-name.txt”. Click it.&lt;/p&gt;
&lt;p&gt;Once you do that, you’ll see the contents of the file — a list of names, mine at the top — and you’ll see a pencil that lets you edit the file. &lt;/p&gt;
&lt;p&gt;Click the pencil! &lt;/p&gt;
&lt;h3 id="change-the-file"&gt;Change the file&lt;/h3&gt;
&lt;p&gt;At this point you’ll see a message saying something like: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You are editing a file in a project you do not have write access to. We are forking this project for you (if one does not yet exist) to write your proposed changes to. Submitting a change to this file will write it to a new branch in your fork so you can send a pull request. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Groovy. If you ignore both the jargon and the bad grammar, you can go ahead and add your name to the bottom of the file, and then you’ll see two fields at the bottom that you can use to explain your change:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Explain Thyself" src="https://michaeljaylissner.com/images/github/explain-thyself.png"/&gt;&lt;/p&gt;
&lt;p&gt;This is like an email. The first field is the subject of your change, something brief and to the point. The second field lets you flesh out in more detail what you did, why it’s useful, etc. In many cases — like simply adding your name to this file — your changes are obvious and you can just hit the big green “Propose file change” button.&lt;/p&gt;
&lt;p&gt;Let’s press the big green button, shall we? &lt;/p&gt;
&lt;h3 id="send-a-pull-request"&gt;Send a “pull request”&lt;/h3&gt;
&lt;p&gt;At this point you’ll see another form with another somewhat cryptic message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The change you just made was written to a new branch in your fork of this project named patch-1. If you’d like the author of the original project to merge these changes, submit a pull request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think the important part of that message is the second sentence:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’d like the author of the original project to merge these changes, submit a pull request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok, so how do you do that? Well, it turns out that the page we’re looking at is very similar to the one we were just on. It has two fields, one for a subject and one for a comment. You can fill these out, but if it’s a simple change you don’t need to, and anyway, if you put stuff on the last page it’ll just be copied here already.&lt;/p&gt;
&lt;p&gt;So: Press the big green button that says “Create pull request”. &lt;/p&gt;
&lt;p&gt;You’re now done, but what did you do, exactly? &lt;/p&gt;
&lt;h3 id="lets-parse-whats-happened-so-far"&gt;Let’s parse what’s happened so far&lt;/h3&gt;
&lt;p&gt;At this point, you’ve found a file, changed it, and submitted a pull request. Along the way, the system told you that it was “forking this project for you” and that your changes were, “written to a new branch in your fork of this project”. &lt;/p&gt;
&lt;p&gt;Um, what? &lt;/p&gt;
&lt;p&gt;The most amazing thing that Git does is allow many developers to work on the same file at the same time. It does this by creating what it calls forks and branches. For our purposes these are basically the same thing. The idea behind both is that every so often people working on a file save a copy of the entire repository into what’s called a commit. A commit is a copy of the code that is saved forever so anybody can travel back in time and see the code from two weeks ago or a month ago or whatever. 95% of any Git repository is just a bunch of these copies, and you actually created one when you saved your changes to the file. &lt;/p&gt;
&lt;p&gt;This is super useful on its own, but when somebody forks or branches the repository, what they do is say, “I want a perfect copy of all the old stuff, but from here on, I’m going my own way whenever I save things.” Over time, everybody working in the repository does this, creating their own work in their own branches, and amazingly, one person’s work doesn’t interfere with another’s. &lt;/p&gt;
&lt;p&gt;Later, once somebody thinks that their work is good enough to share with everybody, they create what’s called a “Pull Request”, just like you did a moment ago, and the owner of the repository — in this case, me — gets an email asking him or her to “pull” the code into the main repository and “merge” the changes into the files that are there. Once this is done, everybody gets those changes from then on. &lt;/p&gt;
&lt;p&gt;It’s a brilliant system. &lt;/p&gt;
&lt;h3 id="my-turn-merging-the-pull-request"&gt;My turn: Merging the pull request&lt;/h3&gt;
&lt;p&gt;When you created that pull request a moment ago, you actually sent me an email and now you have to wait for me to do something. Eventually, I’ll get your email, and when I do I’ll go to Github and see a screen like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PR Screen" src="https://michaeljaylissner.com/images/github/pr-screen.png"/&gt;&lt;/p&gt;
&lt;p&gt;I’ll probably make a comment saying thank you, and then &lt;em&gt;I’ll&lt;/em&gt; press the Big Green Button that says, “Merge pull request”.&lt;/p&gt;
&lt;p&gt;This will merge your changes into mine and we’ll both go about our merry way. Mission accomplished! &lt;/p&gt;
&lt;h2 id="why-this-works-so-well"&gt;Why this works so well&lt;/h2&gt;
&lt;p&gt;This system is pretty amazing and it works very well for tiny little projects and massive ones alike (for example, &lt;a href="https://github.com/torvalds/linux/network"&gt;some projects have thousands of active forks&lt;/a&gt;). What’s great about this system is that it allows anybody to do whatever they want in their fork without requiring any permission from the owner of the code. Anybody can do whatever they want in their fork and I’m happy to see them experimenting. That work will never affect me until they issue a pull request and I merge it in, accepting their proposed changes.&lt;/p&gt;
&lt;p&gt;This process mirrors a lot of real world processes between writers and editors, but solidifies and equalizes it so that there’s a &lt;em&gt;right&lt;/em&gt; way to do things and so that nobody can cause any trouble. The process itself can be a little overwhelming at first, with lots of jargon and steps, but once you get it down, it’s smooth and quick and works very well. &lt;/p&gt;
&lt;p&gt;As you might expect, there are tons of resources about this on the Web. Some really good ones &lt;a href="https://guides.github.com/introduction/flow/"&gt;are at Github&lt;/a&gt; and there are even &lt;a href="http://git-scm.com/book"&gt;entire online books&lt;/a&gt; going into these topics. Like all things, you can go as deep as you want, but the above should give you some good basics to get you started. &lt;/p&gt;
&lt;h2 id="some-definitions"&gt;Some Definitions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Open vs Closed Source&lt;/strong&gt;: This is a topic entire theses and books have been written about, but in general open source is way of creating a program where a developer shares all of their code so anybody can see it. In general when a program is open source, people are welcome to edit the code, help file and fix bugs, etc. On the other hand, closed source development is a way of creating a program so that only the developers can see the code, and the public at large is generally not welcome to contribute, except to sometimes email the developer with comments. &lt;/p&gt;
&lt;p&gt;In a way, the product of open source development is a combination of the code itself plus the program it creates, while in closed source projects the product is the program alone. There are thousands of examples of each of these ways of developing software. For example, &lt;a href="https://source.android.com/"&gt;Android&lt;/a&gt; and the &lt;a href="https://github.com/torvalds/linux/"&gt;Linux Kernel&lt;/a&gt; are open source, while Microsoft Word and iPhones are not. (See how I couldn’t link to the latter two?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt;: A collection of files, images, and other stuff that are kept together for a common purpose. Generally it’s a bunch of files that create a website or program, but some people use repositories for all kinds of things, like dealing with &lt;a href="https://github.com/mlissner/identity-theft"&gt;identity theft&lt;/a&gt; (shameless plug), &lt;a href="https://github.com/mlissner/michaeljaylissner.com/edit/master/content/editing-on-github-a-non-technical-explainer.md"&gt;holding the contents of this very webpage&lt;/a&gt; (shameless plug), or even &lt;a href="https://github.com/vzvenyach/codingforlawyers/"&gt;writing online books teaching lawyers to code&lt;/a&gt; (&lt;em&gt;not&lt;/em&gt; a shameless plug!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pull request&lt;/strong&gt;: A polite way to say, “This code is ready to get included in the main repository. Please pull it in.”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Merging&lt;/strong&gt;: The process of taking a branch or fork and merging the changes in it into another branch or fork. This combines two people’s work into a single place. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="GitHub"></category><category term="howto"></category><category term="CourtListener"></category></entry><entry><title>Updating Bulk Data in CourtListener</title><link href="https://michaeljaylissner.com/posts/2014/09/28/updating-bulk-data-in-courtlistener/" rel="alternate"></link><updated>2014-11-06T00:00:00-08:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2014-09-28:posts/2014/09/28/updating-bulk-data-in-courtlistener/</id><summary type="html">
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I’ve written &lt;a href="https://michaeljaylissner.com/posts/2014/11/06/updating-bulk-data-in-courtlistener-more/"&gt;another post&lt;/a&gt; about how the solution presented here wasn’t fast enough and didn’t work out. You may want to read it as well.&lt;/p&gt;
&lt;p&gt;There’s an increasing demand for bulk data from government systems, and while this will generate big wins for transparency, accountability, and innovation (at the occasional cost of privacy&lt;sup id="fnref:privacy"&gt;&lt;a class="footnote-ref" href="#fn:privacy" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;), it’s important to consider a handful of technical difficulties that &lt;em&gt;can&lt;/em&gt; come along with creating and providing such data. Do &lt;em&gt;not&lt;/em&gt; misread this post as me saying, “bulk data is hard, don’t bother doing it.” Rather, like most of my posts, read this as an in-the-trenches account of issues we’ve encountered and solutions we’ve developed at CourtListener. &lt;/p&gt;
&lt;h2 id="the-past-and-present"&gt;The Past and Present&lt;/h2&gt;
&lt;p&gt;For the past several years we’ve had &lt;a href="https://www.courtlistener.com/api/bulk-info/"&gt;bulk data at CourtListener&lt;/a&gt;, but to be frank, it’s been pretty terrible in a lot of ways. Probably the biggest issue with it was that we created it as a single massive &lt;span class="caps"&gt;XML&lt;/span&gt; file (~&lt;span class="caps"&gt;13GB&lt;/span&gt;, compressed!). That made a lot of sense for our backend processing, but people consuming the bulk data complained that it crashed 32 bit systems&lt;sup id="fnref:sympathy"&gt;&lt;a class="footnote-ref" href="#fn:sympathy" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, consumed memory endlessly, decompressing it wasn’t possible on Windows&lt;sup id="fnref:sympathy"&gt;&lt;a class="footnote-ref" href="#fn:sympathy" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, etc. &lt;/p&gt;
&lt;p&gt;On top of these issues for people consuming our bulk data, and even though we set it up to be efficient for our servers, we did a stupid thing when we set it up and made it so our users could generate bulk files whenever they wanted for any day, month, year or jurisdiction. And create bulk files they did. Indeed in the year since we started keeping tabs on this, people made nearly fifty thousand requests for time-based bulk data&lt;sup id="fnref:stats"&gt;&lt;a class="footnote-ref" href="#fn:stats" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;
&lt;p&gt;On the backend, the way this worked was that the first time somebody wanted a bulk file, they requested it, we generated it, and then we served it. The second time somebody requested that same file, we just served the one we generated  before, creating a disk-based cache of sorts. This actually worked pretty well but it let people start long-running processes on our server that could degrade the performance of the front end. It wasn’t great, but it was a simple way to serve time- and jurisdiction-based files.&lt;sup id="fnref:file-count"&gt;&lt;a class="footnote-ref" href="#fn:file-count" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;/p&gt;
&lt;p&gt;As any seasoned developer knows, the next problem with such a system would be cache invalidation. How would we know that a cached bulk file had bad data and how would we delete it if necessary? Turns out this wasn’t so hard, but every time we changed (or deleted) an item in our database we had code that went out to the cache on disk and deleted any bulk files that might contain stale data. Our data doesn’t change often, so for the most part this worked, but it’s the kind of spaghetti code you want to avoid. Touching disk whenever an item is updated? Not so good.  &lt;/p&gt;
&lt;p&gt;And there were bugs. &lt;a href="https://github.com/freelawproject/courtlistener/issues/278"&gt;Weird ones&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yeah, the old system kind of sucked. The last few days I’ve been busy re-working our bulk data system to make it more reliable, easier to use and just overall, better.&lt;/p&gt;
&lt;h2 id="the-new-system"&gt;The New System&lt;/h2&gt;
&lt;p&gt;Let’s get the bad news taken care of off the bat: The new system no longer allows date-based bulk files. Since these could cause performance issues on the front end, and since &lt;a href="http://lists.freelawproject.org/pipermail/dev/2014-August/000069.html"&gt;nobody opposed the change&lt;/a&gt;, we’ve done away with this feature. It had a good life, may it &lt;span class="caps"&gt;RIP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The good news is that by getting rid of the date-based bulk files, we’ve been able to eliminate a metric &lt;em&gt;ton&lt;/em&gt; of complexity, &lt;a href="http://theweek.com/article/index/241002/how-the-wrong-definition-of-literally-snuck-into-the-dictionary"&gt;literally&lt;/a&gt;! No longer do we need the disk-cache. No longer do we need to parse URLs and generate bulk data on the fly. No longer is the code a mess of decision trees based on cache state and user requests. Ah, it feels so free at last! &lt;/p&gt;
&lt;p&gt;And it gets even better. On top of this, we were able to resolve &lt;a href="https://github.com/freelawproject/courtlistener/issues/285"&gt;a long-standing feature request&lt;/a&gt; for complete bulk data files by jurisdiction. We were able to make the schema of the bulk files match that of &lt;a href="https://www.courtlistener.com/api/rest-info/"&gt;our &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. We were able to make the bulk file a tar of smaller &lt;span class="caps"&gt;JSON&lt;/span&gt; files, so no more issues unzipping massive files or having 32 bit systems crash. &lt;a href="https://www.youtube.com/watch?v=8vZx7yF_a7M"&gt;We settled all the family business&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Oh, and one more thing: When this goes live, we’ll have bulk files and an &lt;span class="caps"&gt;API&lt;/span&gt; for oral arguments as well — Another CourtListener first. &lt;/p&gt;
&lt;h2 id="jeez-thats-great-whyd-you-wait-so-long"&gt;Jeez, That’s Great, Why’d You Wait So Long?&lt;/h2&gt;
&lt;p&gt;This is a fair question. If it was possible to gain so much so quickly, why didn’t we do it sooner? Well, there are a number of reasons, but at the core, like so many things, it’s because nothing is actually that easy. &lt;/p&gt;
&lt;p&gt;Before we could make these improvements, we needed to: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure the impact on our users &lt;a href="http://lists.freelawproject.org/pipermail/dev/2014-August/000069.html"&gt;wouldn’t be an issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Test the performance of generating more than 350 bulk files at the end of each month&lt;sup id="fnref:dev-aside"&gt;&lt;a class="footnote-ref" href="#fn:dev-aside" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Have &lt;a href="https://www.courtlistener.com/api/rest-info/"&gt;our &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; in place so we could use it to generate the bulk files&lt;/li&gt;
&lt;li&gt;Complete &lt;a href="https://github.com/freelawproject/courtlistener/commit/a0e4326d98e9f501ec3e69955d6b5650471686e8#diff-30d04f22c69dda9704be56ec95d9d2c1R68"&gt;performance profiling&lt;/a&gt; to identify &lt;a href="https://github.com/freelawproject/courtlistener/commit/a0e4326d98e9f501ec3e69955d6b5650471686e8#diff-6f850cf75fe2e1d17284e0b701b26b06L47"&gt;hot spots&lt;/a&gt; in the new bulk data &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/freelawproject/courtlistener/commit/52e8eff985fdf75612837cef4d9ef55ad60f29ad#diff-6"&gt;Rewrite the documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And pretty much everything else you can imagine. So, I suppose the answer is: We waited so long because it was hard. &lt;/p&gt;
&lt;p&gt;But being hard is one thing. Another thing is that although a number of organizations have used our bulk data, never has any contributed either energy or resources to fixing the bugs that they reported. Despite the benefits these organizations got from the bulk files, none chose to support the ecosystem from which they benefited. You can imagine how this isn’t particularly motivational for us, but we’re hopeful that with the new and improved system, those using our data will appreciate the quality of the bulk data and consider &lt;a href="https://www.courtlistener.com/donate/"&gt;supporting us&lt;/a&gt; down the road.  &lt;/p&gt;
&lt;h2 id="wrapping-up"&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;So, without sucking on too many sour grapes, that’s the story behind the upgrades we’re making to the bulk files at CourtListener. At first blush it may seem like a fairly straightforward feature to get in place (and remember, in &lt;em&gt;many&lt;/em&gt; cases bulk data is stupid-easy to do), but we thought it would be interesting to share our experiences so others might compare notes. If you’re a consumer of CourtListener bulk data, we’ll be taking the wraps off of these new features soon, so make sure to watch the &lt;a href="https://free.law"&gt;Free Law Project blog&lt;/a&gt;. If you’re a developer that’s interested in this kind of thing, we’re eager to hear your feedback and any thoughts you might have. &lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:privacy"&gt;
&lt;p&gt;For example, a few days ago some folks got access to &lt;span class="caps"&gt;NYC&lt;/span&gt; taxi information in bulk. In theory it was anonymized using &lt;span class="caps"&gt;MD5&lt;/span&gt; hashing, but because there were a limited number of inputs into the hashing algorithm, all it took to de-anonymize the data was to compute every possible hash (“&lt;a href="https://medium.com/@vijayp/of-taxis-and-rainbows-f6bc289679a1"&gt;computing the 22M hashes took less than 2 minutes&lt;/a&gt;“) and then work backwards from there to the original IDs. While one researcher did that, another one began finding images of celebrities in taxis and figuring out where they went. Privacy is hard. &lt;a class="footnote-backref" href="#fnref:privacy" rev="footnote" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:sympathy"&gt;
&lt;p&gt;I confess I’m not &lt;em&gt;that&lt;/em&gt; sympathetic… &lt;a class="footnote-backref" href="#fnref:sympathy" rev="footnote" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:stats"&gt;
&lt;p&gt;To be exact: 48271 requests, as gathered by our stats module. &lt;a class="footnote-backref" href="#fnref:stats" rev="footnote" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:file-count"&gt;
&lt;p&gt;So far, 17866 files were created this way that haven’t been invalidated, as counted by: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;maxdepth&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"%s:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="s"&gt;"$dir"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="s"&gt;"$dir"&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="footnote-backref" href="#fnref:file-count" rev="footnote" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:dev-aside"&gt;
&lt;p&gt;Commence a fun digression for the developers. As you might expect, aside from compressing bulk files, the bottleneck of generating 350+ bulk files at once is pulling items from the database and converting them to &lt;span class="caps"&gt;JSON&lt;/span&gt;. We tried a few solutions to this problem, but the best we came up with takes advantage of the fact that every item in the database belongs in exactly two bulk files: The all.tar.gz file and the {jurisdiction}.tar.gz file. One way to put the item into both places would be to generate the all.tar.gz file and then generate each of the 350 smaller files. &lt;/p&gt;
&lt;p&gt;That would iterate every item in the database twice, but while making the jurisdiction files you’d have to do a lot of database filtering…something that it’s generally good to avoid. Our solution to this problem is to create a dictionary of open file handles and then to iterate the entire database once. For each item in the database, add it to both the all.tar.gz file and add it to the {jurisdiction}.tar.gz file. Once complete, close all the file handles. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Get all the courts&lt;/span&gt;
&lt;span class="n"&gt;courts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Court&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# Create a dictionary with one key per jurisdiction&lt;/span&gt;
&lt;span class="n"&gt;tar_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;court&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;courts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;tar_files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;court&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tarfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'/tmp/bulk/opinions/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.tar.gz'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;court&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'w:gz'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;compresslevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Then iterate over everything, adding it to the correct key&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Add the json str to the two tarballs&lt;/span&gt;
    &lt;span class="n"&gt;tarinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tarfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TarInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.json"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;tar_files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;court_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;tarinfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;tar_files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;tarinfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In a sense the first part creates a variable for every jurisdiction on the fly and the second part uses that variable as a dumping point for each item as it iterates over them. &lt;/p&gt;
&lt;p&gt;A fine hack. &lt;a class="footnote-backref" href="#fnref:dev-aside" rev="footnote" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Bulk Data"></category><category term="CourtListener"></category></entry><entry><title>Reworking the CourtListener Datamodel</title><link href="https://michaeljaylissner.com/posts/2014/06/18/reworking-the-courtlistener-datamodel/" rel="alternate"></link><updated>2014-06-18T00:00:00-07:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2014-06-18:posts/2014/06/18/reworking-the-courtlistener-datamodel/</id><summary type="html">&lt;p&gt;Brian and I have  been hard at work the past week figuring out how to make 
&lt;a href="https://www.courtlistener.com/"&gt;CourtListener&lt;/a&gt; able to understand more that one document type. Our goal
 right now is to make it possible to&amp;nbsp;add:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;oral arguments and other audio&amp;nbsp;content,&lt;/li&gt;
&lt;li&gt;video content if it&amp;#8217;s&amp;nbsp;available,&lt;/li&gt;
&lt;li&gt;content from &lt;a href="https://free.law/recap/"&gt;&lt;span class="caps"&gt;RECAP&lt;/span&gt;&lt;/a&gt;,&amp;nbsp;and&lt;/li&gt;
&lt;li&gt;thousands of ninth circuit briefs that Resource.org &lt;a href="https://law.resource.org/pub/us/case/ca9/"&gt;has recently&amp;nbsp;scanned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with our current database is that it&amp;#8217;s not organized in a way 
that supports linkages between content. So, if we have the oral argument 
and the opinion from a single case, we have no way of pointing them at each
other. Turns out this is a sticky&amp;nbsp;problem. &lt;/p&gt;
&lt;p&gt;The solution we&amp;#8217;ve come up with is an architecture like the&amp;nbsp;following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="New Schema" src="https://michaeljaylissner.com/images/new-schema-design-compact_0.png" /&gt;&lt;/p&gt;
&lt;p&gt;(we also have &lt;a href="http://owncloud.freelawproject.org/public.php?service=files&amp;amp;t=76ef76ec69488fb72b4d96dba4809339"&gt;a more detailed version&lt;/a&gt; and &lt;a href="http://owncloud.freelawproject.org/public.php?service=files&amp;amp;t=62510f0282b06948e8c3d3b1e4946ec0"&gt;an editable version&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;And eventually, this will also have a Case table above the docket that 
allows multiple dockets to be associated with a single case. For now though,
that&amp;#8217;s moot, as we don&amp;#8217;t have anyway of figuring out which dockets go&amp;nbsp;together. &lt;/p&gt;
&lt;p&gt;The first stage of this will be to add support for oral arguments, 
since they make a simple case to work with. Once that&amp;#8217;s complete the next 
stage will be either to add the &lt;span class="caps"&gt;RECAP&lt;/span&gt; documents or those from&amp;nbsp;Resource.org. &lt;/p&gt;
&lt;h3 id="urls"&gt;URLs&lt;/h3&gt;
&lt;p&gt;Since this is such a big change, we&amp;#8217;re also taking this opportunity to 
re-work our URLs. Currently, they look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;court&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;numeric&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;https:&lt;/span&gt;&lt;span class="c1"&gt;//www.courtlistener.com/scotus/yjn/roe-v-wade/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few things bug me about that. First, it doesn&amp;#8217;t tell you anything about 
what kind of thing you can expect to see if you click that link. Second, 
the alpha-numeric &lt;span class="caps"&gt;ID&lt;/span&gt; is kind of lame. It&amp;#8217;s just a reference to the database
primary key for the item, and we should just show that value (in this case,
&amp;#8220;yjn&amp;#8221; means &amp;#8220;108713&amp;#8221;). To fix both of these issues, the new URLs will&amp;nbsp;be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opinion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;numeric&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;https:&lt;/span&gt;&lt;span class="c1"&gt;//www.courtlistener.com/opinion/108713/roe-v-wade/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That should be easier to read and should tell you what type of item you&amp;#8217;re 
about to look at. Don&amp;#8217;t worry, the old URLs will keep working just&amp;nbsp;fine. &lt;/p&gt;
&lt;p&gt;And the rest of the new URLs will&amp;nbsp;be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;oral&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;numeric&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docket&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;numeric&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and&amp;nbsp;eventually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;recap&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;numeric&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="api"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;We expect these changes to come with changes to the &lt;span class="caps"&gt;API&lt;/span&gt;, 
so we&amp;#8217;ll likely be releasing &lt;span class="caps"&gt;API&lt;/span&gt; version 1.1 that will add support for 
dockets and oral&amp;nbsp;arguments. &lt;/p&gt;
&lt;p&gt;The current version 1.0 should keep working just fine, 
since we&amp;#8217;re not changing any of the underlying data, 
but I expect that it will have some changes to the URLs and things like 
that. I&amp;#8217;ll be posting more about this in the CourtListener dev list. 
as the changes become more clear and as we sort out what a fair policy is 
for the deprecation of old&amp;nbsp;APIs. &lt;/p&gt;</summary><category term="CourtListener"></category><category term="data modeling"></category><category term="database"></category></entry><entry><title>Presentation on Juriscraper and CourtListener for LVI2012</title><link href="https://michaeljaylissner.com/posts/2012/10/09/presentation-on-juriscraper-and-courtlistener-for-lvi2012/" rel="alternate"></link><updated>2012-10-09T19:42:47-07:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2012-10-09:posts/2012/10/09/presentation-on-juriscraper-and-courtlistener-for-lvi2012/</id><summary type="html">&lt;p&gt;Yesterday and today I&amp;#8217;ve been in Ithaca, New York, participating in the Law 
via the Internet Conference (&lt;span class="caps"&gt;LVI&lt;/span&gt;), where I&amp;#8217;ve been learning&amp;nbsp;tons!&lt;/p&gt;
&lt;p&gt;I had the good fortune to have my proposal topic selected for &lt;a href="http://blog.law.cornell.edu/lvi2012/overview/track-4-application-development-for-open-access-and-engagement/"&gt;Track 4: 
Application Development for Open Access and Engagement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the interest of sharing, I&amp;#8217;ve &lt;a href="https://michaeljaylissner.com/pdfs/LVI-Presentation-Lissner-Juriscraper.pdf"&gt;attached the latest version of my slides&lt;/a&gt; 
to this Blog post, and the audio for the talk may eventually get posted &lt;a href="http://blog.law.cornell.edu/lvi2012/presentation/wrangling-court-data-on-a-national-level/"&gt;on
the &lt;span class="caps"&gt;LVI&lt;/span&gt; site&lt;/a&gt;.&lt;/p&gt;</summary><category term="lvi2012"></category><category term="lvi"></category><category term="juriscraper"></category><category term="CourtListener"></category><category term="Cornell"></category></entry><entry><title>New tool for testing lxml XPath queries</title><link href="https://michaeljaylissner.com/posts/2012/05/20/new-tool-for-testing-lxml-xpath-queries/" rel="alternate"></link><updated>2012-05-20T15:48:06-07:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2012-05-20:posts/2012/05/20/new-tool-for-testing-lxml-xpath-queries/</id><summary type="html">&lt;p&gt;I got a bit frustrated today, and decided that I should build a tool to fix my frustration. The problem was that we&amp;#8217;re using a lot of XPath queries to scrape various court websites, but there was no tool that could be used to test xpath expressions&amp;nbsp;efficiently.&lt;/p&gt;
&lt;p&gt;There are a couple tools that are quite similar to what I just built: There&amp;#8217;s one called Xacobeo, Eclipse has one built in, and even Firebug has a tool that does similar. Unfortunately though, these each operate on a different &lt;span class="caps"&gt;DOM&lt;/span&gt; interpretation than the one that lxml&amp;nbsp;builds. &lt;/p&gt;
&lt;p&gt;So the problem I was running into was that while these tools helped, I consistently had the problem that when the &lt;span class="caps"&gt;HTML&lt;/span&gt; got nasty, they&amp;#8217;d start falling&amp;nbsp;over. &lt;/p&gt;
&lt;p&gt;No more! Today I built &lt;a href="https://github.com/mlissner/lxml-xpath-tester/"&gt;a quick Django app&lt;/a&gt; that can be run locally or on a server. It&amp;#8217;s quite simple. You input some &lt;span class="caps"&gt;HTML&lt;/span&gt; and an XPath expression, and it will tell you the matches for that expression. It has syntax highlighting, and a few other tricks up its sleeve, but it&amp;#8217;s pretty basic on the&amp;nbsp;whole.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d love to get any feedback I can about this. It&amp;#8217;s probably still got some bugs, but it&amp;#8217;s small enough that they should be quite easy to stamp&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I got in touch with the developer of Xacobeo. There&amp;#8217;s an &lt;code&gt;--html&lt;/code&gt; 
flag that you can pass to it at startup, if that&amp;#8217;s your intention. If you use 
that, it indeed uses the same &lt;span class="caps"&gt;DOM&lt;/span&gt; parser that my tool does. Sigh. Affordances 
are important, especially in a &lt;span class="caps"&gt;GUI&lt;/span&gt;-based&amp;nbsp;tool.&lt;/p&gt;</summary><category term="Python"></category><category term="lxml"></category><category term="juriscraper"></category><category term="CourtListener"></category></entry><entry><title>Further privacy protections at CourtListener</title><link href="https://michaeljaylissner.com/posts/2012/04/27/further-privacy-protections-at-courtlistener/" rel="alternate"></link><updated>2012-04-27T17:05:21-07:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2012-04-27:posts/2012/04/27/further-privacy-protections-at-courtlistener/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve &lt;a href="https://michaeljaylissner.com/posts/2012/01/16/respecting-privacy-while-providing-hundreds-of-thousands-of-public-documents/"&gt;written previously&lt;/a&gt; about the lengths we go to at CourtListener to
protect people&amp;#8217;s privacy, and today we completed one more privacy&amp;nbsp;enhancement. &lt;/p&gt;
&lt;p&gt;After my last post on this topic, we discovered that although we had 
already blocked cases from appearing in the search results of all major 
search engines, we had a privacy leak in the form of our computer-readable 
sitemaps. These sitemaps contain links to every page within a website, 
and since those links contain the names of the parties in a case, 
it&amp;#8217;s possible that a Google search for the party name could turn up results
that should be&amp;nbsp;hidden.&lt;/p&gt;
&lt;p&gt;This was problematic, and as of now we have changed the way we serve 
sitemaps so that they use the &lt;code&gt;noindex X-Robots-Tag&lt;/code&gt; &lt;span class="caps"&gt;HTTP&lt;/span&gt; header. This tells 
search crawlers that they are welcome to read our sitemaps, 
but that they should avoid serving them or indexing&amp;nbsp;them.&lt;/p&gt;</summary><category term="sitemaps.xml"></category><category term="privacy"></category><category term="policy"></category><category term="CourtListener"></category></entry><entry><title>My Presentation Proposal for LVI 2012</title><link href="https://michaeljaylissner.com/posts/2012/03/15/my-presentation-proposal-for-lvi-2012/" rel="alternate"></link><updated>2012-03-15T20:09:29-07:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2012-03-15:posts/2012/03/15/my-presentation-proposal-for-lvi-2012/</id><summary type="html">&lt;p&gt;The &lt;a href="http://blog.law.cornell.edu/lvi2012/"&gt;Law Via the Internet&lt;/a&gt; conference is  celebrating its 20th anniversary
at Cornell University on October 7-9th. I will be attending, 
and with any luck, I&amp;#8217;ll be presenting on the topic proposed&amp;nbsp;below.&lt;/p&gt;
&lt;h3 id="wrangling-court-data-on-a-national-level"&gt;Wrangling Court Data on a National&amp;nbsp;Level&lt;/h3&gt;
&lt;p&gt;Access to case law has recently become easier than ever: By simply visiting 
a court&amp;#8217;s website it is now possible to find and read thousands of cases 
withou  ever leaving your home. At the same time, there are nearly a hundred
 court websites, many of these websites suffer from poor funding or 
 prioritization, and gaining a higher-level view of the law can be 
 challenging. &amp;#8220;&lt;a href="https://github.com/freelawproject/juriscraper/"&gt;Juriscraper&lt;/a&gt;&amp;#8221; is a new project designed to ease these 
 problems for all those that wish to collect these court opinions daily. The
  project is under active development, and we are looking for others to get&amp;nbsp;involved.&lt;/p&gt;
&lt;p&gt;Juriscraper is a liberally-licensed open source library that can be picked 
up and used by any organization to scrape the case data from court websites.
 In addition to a simply scraping the websites and extracting metadata from 
 them, Juriscraper has a number of other design&amp;nbsp;goals:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extensibility to support video, oral argument audio, and other media&amp;nbsp;types&lt;/li&gt;
&lt;li&gt;Support for all metadata provided by court&amp;nbsp;websites&lt;/li&gt;
&lt;li&gt;Extensibility to support varied geographies and&amp;nbsp;jurisdictions&lt;/li&gt;
&lt;li&gt;Generalized object-oriented architecture with little or no code&amp;nbsp;repetition&lt;/li&gt;
&lt;li&gt;Standardized coding techniques using the latest libraries and standards (Python, xpath, lxml, requests,&amp;nbsp;chardet)&lt;/li&gt;
&lt;li&gt;Simple installation, configuration, and &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Friendly and transparent to court&amp;nbsp;websites&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As well as a number of&amp;nbsp;features:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Harmonizatio  of metadata (&lt;span class="caps"&gt;US&lt;/span&gt;, &lt;span class="caps"&gt;USA&lt;/span&gt;, United States of America, 
 etc ? United States; et al, et. al., etc. get eliminated; vs., v, 
 vs ? v.; all dates are Python objects;&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;Smart title-casing of case names (several courts provide case names in 
 uppercase&amp;nbsp;only)&lt;/li&gt;
&lt;li&gt;Sanity checking and sorting of metadata values returned by court&amp;nbsp;websites&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once implemented, Juriscraper is part of a two-part system. The second part 
is the caller, which uses the &lt;span class="caps"&gt;API&lt;/span&gt;, and which itself solves some interesting&amp;nbsp;questions:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How are duplicates detected and&amp;nbsp;avoided? &lt;/li&gt;
&lt;li&gt;How can the impact on court websites be&amp;nbsp;minimized?&lt;/li&gt;
&lt;li&gt;How can mime type detection be completed successfully so that textual contents can be&amp;nbsp;extracted?&lt;/li&gt;
&lt;li&gt;What should we do if it is an image-based &lt;span class="caps"&gt;PDF&lt;/span&gt;?&lt;ul&gt;
&lt;li&gt;How should &lt;span class="caps"&gt;HTML&lt;/span&gt; be&amp;nbsp;tidied?&lt;/li&gt;
&lt;li&gt;How often should we check a court website for new&amp;nbsp;content?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What should we do in case of&amp;nbsp;failure?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Juriscraper is currently deployed by CourtListener.com to scrape all of the 
Federal Appeals courts, and we are slowly adding additional state courts 
over the coming&amp;nbsp;weeks. &lt;/p&gt;
&lt;p&gt;We have been scraping these sites in various ways for several years, 
and Juriscraper is the culmination of what we&amp;#8217;ve learned. We hope that by 
presenting our work at &lt;span class="caps"&gt;LVI&lt;/span&gt; 2012, we will be able to share what we have 
learned and gain additional collaborators in our&amp;nbsp;work.&lt;/p&gt;</summary><category term="proposal"></category><category term="presentations"></category><category term="me"></category><category term="lvi2012"></category><category term="juriscraper"></category><category term="CourtListener"></category></entry><entry><title>The Winning Font in Court Opinions</title><link href="https://michaeljaylissner.com/posts/2012/01/27/and-the-winning-font-in-court-documents-is/" rel="alternate"></link><updated>2012-01-27T22:15:58-08:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2012-01-27:posts/2012/01/27/and-the-winning-font-in-court-documents-is/</id><summary type="html">&lt;p&gt;At CourtListener, we&amp;#8217;re developing a new system to convert scanned court 
documents to text. As part of our development we&amp;#8217;ve analyzed more than 1,000 
court opinions to determine what fonts courts are&amp;nbsp;using. &lt;/p&gt;
&lt;p&gt;Now that we have this information, our next step is to create training data 
for &lt;a href="http://code.google.com/p/tesseract-ocr/"&gt;our &lt;span class="caps"&gt;OCR&lt;/span&gt; system&lt;/a&gt; so that it specializes in these fonts, 
but for now we&amp;#8217;ve attached &lt;a href="https://michaeljaylissner.com/archive/court-font-analysis/font-analysis.ods"&gt;a spreadsheet&lt;/a&gt; with our findings, 
and &lt;a href="https://michaeljaylissner.com/archive/court-font-analysis/extract_font_metadata_from_files.py"&gt;a script that can be used by others&lt;/a&gt; to extract font metadata 
from&amp;nbsp;PDFs.&lt;/p&gt;
&lt;p&gt;Unsurprisingly, the top font &amp;mdash; drumroll please &amp;mdash; is Times New&amp;nbsp;Roman. &lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;Font&lt;/td&gt;
        &lt;th&gt;Regular&lt;/td&gt;
        &lt;th&gt;Bold
        &lt;th&gt;Italic
        &lt;th&gt;Bold Italic
        &lt;th&gt;Total
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Times
        &lt;td&gt;1454
        &lt;td&gt;953
        &lt;td&gt;867
        &lt;td&gt;47
        &lt;td&gt;&lt;strong&gt;3321&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Courier
        &lt;td&gt;369
        &lt;td&gt;333
        &lt;td&gt;209
        &lt;td&gt;131
        &lt;td&gt;&lt;strong&gt;1042&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Arial
        &lt;td&gt;364
        &lt;td&gt;39
        &lt;td&gt;11
        &lt;td&gt;41
        &lt;td&gt;&lt;strong&gt;455&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Symbol
        &lt;td&gt;212
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;&lt;strong&gt;212&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Helvetica
        &lt;td&gt;24
        &lt;td&gt;161
        &lt;td&gt;2
        &lt;td&gt;2
        &lt;td&gt;&lt;strong&gt;189&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Century Schoolbook
        &lt;td&gt;58
        &lt;td&gt;54
        &lt;td&gt;52
        &lt;td&gt;9
        &lt;td&gt;&lt;strong&gt;173&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Garamond
        &lt;td&gt;44
        &lt;td&gt;42
        &lt;td&gt;41
        &lt;td&gt;0
        &lt;td&gt;&lt;strong&gt;127&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Palatino Linotype
        &lt;td&gt;36
        &lt;td&gt;24
        &lt;td&gt;24
        &lt;td&gt;1
        &lt;td&gt;&lt;strong&gt;85&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Old English
        &lt;td&gt;42
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;&lt;strong&gt;42&lt;/strong&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Lincoln
        &lt;td&gt;27
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;0
        &lt;td&gt;&lt;strong&gt;27&lt;/strong&gt;
    &lt;/tr&gt;
&lt;/table&gt;</summary><category term="typography"></category><category term="tesseract"></category><category term="Python"></category><category term="ocr"></category><category term="font"></category><category term="CourtListener"></category></entry><entry><title>Respecting privacy while providing hundreds of thousands of public documents</title><link href="https://michaeljaylissner.com/posts/2012/01/16/respecting-privacy-while-providing-hundreds-of-thousands-of-public-documents/" rel="alternate"></link><updated>2012-01-16T22:13:22-08:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2012-01-16:posts/2012/01/16/respecting-privacy-while-providing-hundreds-of-thousands-of-public-documents/</id><summary type="html">&lt;p&gt;At CourtListener, we have always taken privacy very seriously. We &lt;a href="http://courtlistener.com/coverage/"&gt;have over 600,000&lt;/a&gt; cases currently, most of which are available on Google and other search engines. But in the interest of privacy, we make two broad exceptions to what&amp;#8217;s available on search&amp;nbsp;engines: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As is stated in our &lt;a href="http://courtlistener.com/removal/"&gt;removal policy&lt;/a&gt;, if someone gets in touch with us in writing and requests that we block search engines from indexing a document, we generally attempt to do so within a few&amp;nbsp;hours. &lt;/li&gt;
&lt;li&gt;If we discover a privacy problem within a case, we proactively block search engines from indexing&amp;nbsp;it. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of these exceptions presents interesting problems. In the case of requests to prevent indexing by search engines, we&amp;#8217;re often faced with an ethical dilemma, since in many instances, the party making the request is merely displeased that their involvement in the case is easy to discover and/or they are simply embarrassed by their past. In this case, the question we have to ask ourselves is: Where is the balance between the person&amp;#8217;s right to privacy and the public&amp;#8217;s need to access court records, and to what extent do changes in &lt;a href="http://scholar.google.com/scholar?hl=en&amp;amp;q=practical+obscurity+privacy"&gt;practical obscurity&lt;/a&gt; compel action on our behalf? For example, if someone convicted of murder or child molestation is trying to make information about their past harder to discover, how should we weigh the public&amp;#8217;s interest in easily locating this information via a search engine? In the case of convicted child molesters, we can look to &lt;a href="http://en.wikipedia.org/wiki/Megan%27s_Law"&gt;Megan&amp;#8217;s law&lt;/a&gt; for a public policy stance on the issue, but even that forces us to ask to what extent we should chart our own path, and to what extent we should follow public policy&amp;nbsp;decisions. &lt;/p&gt;
&lt;p&gt;On the opposite end of the spectrum, many of the cases that we block search engines from indexing are asylum cases where a person has lost an attempt to stay in the United States, and been sent back to a country where they feel unsafe. In such cases, it seems clear that it&amp;#8217;s important to keep the person&amp;#8217;s name out of search engine results, but still we must ask to what extent do we have an obligation to identify and block such cases from appearing proactively rather than post&amp;nbsp;hoc? &lt;/p&gt;
&lt;p&gt;In both of these scenarios, we have taken a middle ground that we hope strikes a balance between the public&amp;#8217;s need for court documents and an individual&amp;#8217;s desire or need for privacy. Instead of either proactively blocking search engines from indexing cases or keeping cases in search results against a party&amp;#8217;s request, our current policy is to block search engines from indexing a web page as each request comes in. We currently have 190 cases that are blocked from search results, and the number increases&amp;nbsp;regularly. &lt;/p&gt;
&lt;p&gt;Where we do take proactive measures to block cases from search results is where we have discovered unredacted or &lt;a href="https://freedom-to-tinker.com/blog/tblee/what-gets-redacted-pacer"&gt;improperly redacted&lt;/a&gt; social security numbers in a case. Taking a cue from the now-defunct Altlaw, whenever a case is added, we look for character strings that appear to be social security numbers, tax &lt;span class="caps"&gt;ID&lt;/span&gt; numbers or alien &lt;span class="caps"&gt;ID&lt;/span&gt; numbers. If we find any such strings, we replace them with x&amp;#8217;s, and we try to make sure the unredacted document does not appear in search results outside of&amp;nbsp;CourtListener. &lt;/p&gt;
&lt;p&gt;The methods we have used to block cases from appearing in search results have evolved over time, and I&amp;#8217;d like to share what we&amp;#8217;ve learned so others can give us feedback and learn from our experiences. There are five technical measures we use to keep a case out of search&amp;nbsp;results: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;robots.txt&amp;nbsp;file &lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; meta noindex&amp;nbsp;tags &lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; X-Robots-Tag&amp;nbsp;headers &lt;/li&gt;
&lt;li&gt;sitemaps.xml&amp;nbsp;files &lt;/li&gt;
&lt;li&gt;The webmaster tools provided by the search engines&amp;nbsp;themselves&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of these deserves a moment of explanation. &lt;a href="http://www.robotstxt.org/"&gt;robots.txt&lt;/a&gt; is a protocol that is respected by all major search engines internationally, and which allows site authors (such as myself) to identify web pages that shouldn&amp;#8217;t be crawled. Note that I said &lt;strong&gt;crawled&lt;/strong&gt; not &lt;strong&gt;indexed&lt;/strong&gt;. This is a very important distinction, as I&amp;#8217;ll explain&amp;nbsp;momentarily. &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; meta tags are a tag that you can place into the &lt;span class="caps"&gt;HTML&lt;/span&gt; of a page, and which instructs search engines not to &lt;strong&gt;index&lt;/strong&gt; a page. Since this is an &lt;span class="caps"&gt;HTML&lt;/span&gt; format, this method only works on &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;pages. &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; X-Robots-Tag headers are similar to &lt;span class="caps"&gt;HTML&lt;/span&gt; meta tags, but they allow site authors to request that an &lt;em&gt;item&lt;/em&gt; not be indexed. That item may be an &lt;span class="caps"&gt;HTML&lt;/span&gt; page, but equally, it may be a &lt;span class="caps"&gt;PDF&lt;/span&gt; or even an image that should not&amp;nbsp;searchable. &lt;/p&gt;
&lt;p&gt;Further, we provide an &lt;a href="http://www.sitemaps.org/protocol.html"&gt;&lt;span class="caps"&gt;XML&lt;/span&gt; sitemap&lt;/a&gt; that search engines can understand, and which tells them about every page on the site that they should crawl and&amp;nbsp;index. &lt;/p&gt;
&lt;p&gt;All of these elements fit together into a complicated melange that has 
absorbed many development hours over the past two years, 
as different search engines interpret these standards in different&amp;nbsp;ways. &lt;/p&gt;
&lt;p&gt;For example, Google and Bing interpret the robots.txt files as blocks to 
their crawlers. This means that web pages listed in robots.txt will not be 
&lt;strong&gt;crawled&lt;/strong&gt; by Google or Bing, but that does not mean those pages will not 
be &lt;strong&gt;indexed&lt;/strong&gt;. Indeed, if Google or Bing learn of the existence of a web 
page (for example, because another page linked to it), 
then they will include it in &lt;a href="http://www.youtube.com/watch?v=KBdEwpRQRD0"&gt;their&lt;/a&gt; &lt;a href="http://www.bing.com/community/site_blogs/b/webmaster/archive/2009/08/21/prevent-a-bot-from-getting-lost-in-space-sem-101.aspx"&gt;indexes&lt;/a&gt;. This is true even if 
robots.txt explicitly blocks robots from crawling the page, 
because to include it in their indexes, they don&amp;#8217;t &lt;strong&gt;have to&lt;/strong&gt; crawl it 
&amp;mdash; they just need to know about it! Even your own link to a page is 
sufficient for Google or Bing to know about the page. And what&amp;#8217;s worse, 
if you have a good &lt;span class="caps"&gt;URL&lt;/span&gt; with descriptive words within it, 
Google or Bing will know the terms in the URLs even when they haven&amp;#8217;t 
crawled the page. So if your &lt;span class="caps"&gt;URL&lt;/span&gt; is example
.com/private-page-about-michael-jackson, a query for [ Michael Jackson ] 
could certainly bring it up, even if it were never&amp;nbsp;crawled. &lt;/p&gt;
&lt;p&gt;The solution to this is to allow Google and Bing to crawl the pages, but to use noindex meta or &lt;span class="caps"&gt;HTTP&lt;/span&gt; tags. If these are in place, the pages will not appear in the index at all. This sounds paradoxical: to exclude pages from appearing in Google and Bing, you have to allow them to be crawled? &lt;a href="https://support.google.com/webmasters/bin/answer.py?hl=en&amp;amp;answer=93710"&gt;Yes, that&amp;#8217;s correct&lt;/a&gt;. Furthermore, it&amp;#8217;s theoretically possible that Google or Bing could learn about a page on your site from a link, and then not crawl it immediately or at all. In this case, they will know the &lt;span class="caps"&gt;URL&lt;/span&gt;, but won&amp;#8217;t know about and X-Robots-Tag headers or meta tags. Thus, they might include the document against your wishes. For this reason, it&amp;#8217;s important to &lt;strong&gt;include&lt;/strong&gt; private pages in your sitemap.xml file, inviting and encouraging Google and Bing to crawl the page specifically so the page can be excluded from their&amp;nbsp;indexes.&lt;/p&gt;
&lt;p&gt;Yahoo! uses Bing to power their search engine, and &lt;span class="caps"&gt;AOL&lt;/span&gt; uses Google, so the above strategy applies to them as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Other search engines take a different approach to robots.txt. Ask.com, The Internet Archive and the Russian search engine Yandex.ru all respect the robots meta tag, but not the x-robots-tag &lt;span class="caps"&gt;HTTP&lt;/span&gt; header. Thus, for these search engines, the strategy above works for &lt;span class="caps"&gt;HTML&lt;/span&gt; files, but not for any other files. These crawlers therefore need to be blocked from accessing those other files. On the upside, unlike Google and Bing, it appears that these search engines will not show a document in their results if they have not crawled it. Thus, using robots.txt alone should be&amp;nbsp;sufficient.&lt;/p&gt;
&lt;p&gt;A third class of search engines support neither the robots &lt;span class="caps"&gt;HTML&lt;/span&gt; meta tag, nor the x-robots-tag &lt;span class="caps"&gt;HTTP&lt;/span&gt; header. These are typically less popular or less mature crawlers, and so they must be blocked using robots.txt. There are two approaches to this. The first is to list blocked pages individually in the robots.txt file, and the second is to simply block these search engines from all access. While it&amp;#8217;s possible to list each private document in robots.txt, doing so creates a privacy loophole, since it lists all private documents in one place. At CourtListener, therefore, we take a conservative approach, and completely block all search engines that do not support the &lt;span class="caps"&gt;HTML&lt;/span&gt; meta tag or the x-robots-tag &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;header.&lt;/p&gt;
&lt;p&gt;The final action we take when we receive a request that a document on our site stop appearring in search results, is to use the webmaster tools provided by the major search engines&lt;sup&gt;1&lt;/sup&gt; to explicitly ask those search engines to exclude the document(s) from their&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;Between these measures, private documents on CourtListener should be removed from all major and minor search engines. Where posssible this strategy takes a very granular approach, and where minor search engines do not support certain standards, we take a conservative approach, blocking them&amp;nbsp;entirely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update, 2012-04-29:&lt;/strong&gt; You may also want to look at our &lt;a href="https://michaeljaylissner.com/posts/2012/04/27/further-privacy-protections-at-courtlistener/"&gt;discussion of the impact of putting people&amp;#8217;s names into your URLs, and the way that affects your sitemap files&lt;/a&gt;.&lt;/p&gt;
&lt;!-- actual footnotes --&gt;

&lt;ol&gt;
&lt;li&gt;We use &lt;a href="http://www.google.com/webmasters/tools"&gt;Google&amp;#8217;s Webmaster 
Tools&lt;/a&gt; and &lt;a href="http://www.bing.com/toolbox/webmaster"&gt;Bing&amp;#8217;s 
Webmaster Tools&lt;/a&gt;. Before it was merged into Bing&amp;#8217;s tools, 
we also previously used &lt;a href="http://siteexplorer.search.yahoo
.com/"&gt;Yahoo&amp;#8217;s Site Explorer&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="robots.txt"></category><category term="privacy"></category><category term="practical obscurity"></category><category term="policy"></category><category term="CourtListener"></category></entry><entry><title>Integrating Solr Search with Django at CourtListener</title><link href="https://michaeljaylissner.com/posts/2011/12/02/integrating-solr-search-with-django-at-courtlistener/" rel="alternate"></link><updated>2011-12-02T09:37:39-08:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2011-12-02:posts/2011/12/02/integrating-solr-search-with-django-at-courtlistener/</id><summary type="html">
&lt;p&gt;Over the past few weeks, I’ve been hard at work on the new version of &lt;a href="http://courtlistener.com"&gt;CourtListener&lt;/a&gt;. Unfortunately, progress has been slower than I’d like due to the limitations of the Solr frameworks I’ve been using. There are a number of competing frameworks available, each with its own strengths and pitfalls.&lt;/p&gt;
&lt;p&gt;So far, I’ve tried two of the popular ones, &lt;a href="http://haystacksearch.org/"&gt;Haystack&lt;/a&gt; and &lt;a href="http://opensource.timetric.com/sunburnt/index.html"&gt;Sunburnt&lt;/a&gt;. I’m pretty impressed by both, but today’s blog post is to outline the problems I’m having with these frameworks so that others that are faced with choosing one might be better informed. The difference between these frameworks is vast. Haystack aims to solve all of your integration needs, while Sunburnt is a fairly lightweight wrapper around Solr.&lt;/p&gt;
&lt;h2 id="courtlisteners-needs"&gt;CourtListener’s needs&lt;/h2&gt;
&lt;p&gt;At CourtListener, we have some big goals for the new search version. At its
core, it’s essentially a search-powered site, so we have some big needs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.uxmatters.com/mt/archives/2009/09/best-practices-for-designing-faceted-search-filters.php"&gt;Parallel Faceted Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Highlighting&lt;/li&gt;
&lt;li&gt;Complex boolean searches supported by Solr’s eDisMax syntax&lt;/li&gt;
&lt;li&gt;Snippets below search results and in emails&lt;/li&gt;
&lt;li&gt;Standard search stuff: field-level boosting, result and facet counts, field-level searching, result pagination, performance, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’re currently using &lt;a href="http://sphinxsearch.com"&gt;Sphinx Search&lt;/a&gt; with &lt;a href="http://github.com/dcramer/django-sphinx"&gt;django-sphinx&lt;/a&gt;, which does a fine job, but it has some problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django-sphinx hasn’t been maintained in years, and requires patching&lt;/li&gt;
&lt;li&gt;django-sphinx doesn’t support snippets&lt;/li&gt;
&lt;li&gt;Sphinx doesn’t (yet) support real time indexing (though it’s in beta, I believe)&lt;/li&gt;
&lt;li&gt;Sphinx doesn’t have the community and features that Solr does&lt;/li&gt;
&lt;li&gt;Unfamiliar syntax for users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In general, these problems aren’t too difficult, but in combination, they make for a poor user experience. The last point is a real deal breaker, since most users are accustomed to making queries like [ site:google.com ], which works for Solr and Google, but not for Sphinx. In Sphinx, your query is [ @site(google.com) ]. While we could do post processing of the user’s query to convert it to Google/Solr-style syntax, it’s unreliable and prone to failing in corner cases. Parsing queries is hard. More on this in a moment. &lt;/p&gt;
&lt;h2 id="lets-try-haystack"&gt;Let’s try Haystack&lt;/h2&gt;
&lt;p&gt;In switching from Sphinx, I first tried Haystack as a solution, since it has excellent documentation and seems to be the most popular solution. I spent about two weeks learning about it and getting it in place, but ultimately, I gave up on it because I found that I was subclassing it everywhere. Haystack is a good solution, to be sure, but I found that I was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subclassing the FacetView so it could support parallel facet counts&lt;/li&gt;
&lt;li&gt;Subclassing the FacetForm for another feature I needed&lt;/li&gt;
&lt;li&gt;Subclassing the Solr backend so it could support Solr’s highlighting syntax&lt;/li&gt;
&lt;li&gt;Further subclassing the Solr backend so it can support additional Solr parameters that aren’t built in&lt;/li&gt;
&lt;li&gt;…etc…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I worked on that third point for the better part of a day before deciding that Haystack wasn’t for me. Rather than spending my time working on the search needs of CourtListener, I was spending most of it hacking on Haystack, and trying to understand the way it fits together. It’s not unreasonably complex, but there is a &lt;span class="caps"&gt;LOT&lt;/span&gt; of documentation, and a lot of complexity that I don’t need (such as the ability to switch search backends). Instead of a big solution that allows me to subclass whatever I need (which is good), I needed a lighter-weight solution that was more nimble, and which allowed me to interact with Solr in a more direct way.&lt;/p&gt;
&lt;h2 id="enter-sunburnt"&gt;Enter Sunburnt&lt;/h2&gt;
&lt;p&gt;Sunburnt is a lightweight solution that is everything that Haystack isn’t. From the moment it’s installed, you can start making queries without configuring Django to use it, and without really knowing much else. Its documentation is a single page, which is actually a big relief after coming from Haystack. But Sunburnt has a major problem in its design: It doesn’t support just sending queries to Solr. The expectation in Sunburnt is that each system using it does post-processing on the user’s query, and then submits the query to Sunburnt in stages. &lt;/p&gt;
&lt;p&gt;So, if a user searches for “foo bar”, rather than just passing that to Sunburnt, you have to split on the white space, then pass: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'bar'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At first you think, “&lt;span class="caps"&gt;OK&lt;/span&gt;, I can do that - just split on white space, no big deal.” Then you start thinking about the &lt;a href="http://lucene.apache.org/java/3_4_0/queryparsersyntax.html#Escaping%20Special%20Characters"&gt;other syntax&lt;/a&gt; that Solr supports, and you realize that you have a real problem if you have to split up queries appropriately. Trust me when I say that you don’t want to be thinking about how to send a query like this one to Sunburnt: [ foo bar “jakarta apache”~10 ]. &lt;/p&gt;
&lt;p&gt;The author of Sunburnt will point out that there’s a workaround for this problem. You can use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'"jakarta apache"~10'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That works, to a point, but that syntax isn’t supported on facets, so your facet counts won’t have the same counts as your results. And so, Sunburnt, though powerful and lightweight, fails.&lt;/p&gt;
&lt;h2 id="what-now"&gt;What now?&lt;/h2&gt;
&lt;p&gt;Good question.&lt;/p&gt;</summary><category term="Sunburnt"></category><category term="Solr"></category><category term="Haystack"></category><category term="django"></category><category term="CourtListener"></category></entry><entry><title>The abolishment of the Emergency Court of Appeals (April 18, 1962)</title><link href="https://michaeljaylissner.com/posts/2011/08/10/the-abolishment-of-the-emergency-court-of-appeals-1962/" rel="alternate"></link><updated>2011-08-10T20:50:54-07:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2011-08-10:posts/2011/08/10/the-abolishment-of-the-emergency-court-of-appeals-1962/</id><summary type="html">&lt;p&gt;One of the coming features at &lt;a href="http://courtlistener.com"&gt;CourtListener&lt;/a&gt; is an &lt;span class="caps"&gt;API&lt;/span&gt; for the law. Part of that feature is going to be some basic information about the courts themselves, so I spent some time over the weekend researching courts that served a special purpose but were since&amp;nbsp;abolished.&lt;/p&gt;
&lt;p&gt;One such court was the &lt;a href="https://secure.wikimedia.org/wikipedia/en/wiki/Emergency_Court_of_Appeals"&gt;Emergency Court of Appeals&lt;/a&gt;. It was created during World War &lt;span class="caps"&gt;II&lt;/span&gt; to set prices, and, naturally, was the court of appeals for many cases. The creation date of the court is prominently published in various places on the Internet, but the abolishment history of the court was very difficult to find. After researching online for some time, and learning that my library card had expired (sigh), I put in a query with the &lt;a href="http://www.loc.gov"&gt;Library of Congress&lt;/a&gt;, which provides free research of these types of&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Within a couple days, the provided me with this amazing response, 
 which I&amp;#8217;m sharing here, and on the above Wikipedia&amp;nbsp;article:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As stated in the Legislative Notes to 50 &lt;span class="caps"&gt;U.S.&lt;/span&gt; Code Appendix § 921 to 926, 
as posted at http://www.law.cornell.edu/uscode/html/uscode50a/usc_sec_50a_00000921&amp;#8212;&amp;#8212;000-notes.html, 
the following explanation is given regarding the amendment and repeal of Act 
of Jan. 30, 1942, ch. 26, title &lt;span class="caps"&gt;II&lt;/span&gt;, § 204, 56 Stat. 23,&amp;nbsp;31-33: &lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Section 924, acts Jan. 30, 1942, ch. 26, title &lt;span class="caps"&gt;II&lt;/span&gt;, § 204, 
56 Stat. 31; June 30, 1944, ch. 325, title I, § 107, 58 Stat. 639; June 30, 
1945, ch. 214, § 6, 59 Stat. 308; July 30, 1947, ch. 361, title I, § 101, 
61 Stat. 619; June 25, 1948, ch. 646, § 32(a), 62 Stat. 991; May 24, 1949, 
ch. 139, § 127, 63 Stat. 107, authorized review of orders of the Office of 
Price Administrator under the Emergency Price Control Act of 1942, 
and created the Emergency Court of Appeals for this purpose. The Emergency 
Price Control Act of 1942 terminated on June 30, 1947, 
under the provisions of act July 25, 1946, ch. 671, § 1, 
60 Stat. 664. The Housing and Rent Act of 1948, act Mar. 30, 1948, ch. 161, 
62 Stat. 93, classified to section 1881 of this Appendix, 
continued the Court for the purpose of reviewing recommendations of local 
advisory boards for the decontrol or adjustment of maximum rents. Later, 
the Defense Production Act of 1950, act Sept. 8, 1950, ch. 932, 
64 Stat. 798, classified to sections 2061 to 2166 of this Appendix, 
continued the Court to review regulations and orders relating to price 
control. The Housing and Rent Act of 1948 and the Defense Production Act of 
1950 both terminated, however, the Court remained in existence &amp;#8220;to complete 
the adjudication of rights and liabilities incurred prior to their 
termination dates.&amp;#8221; (Transcript of Proceedings of the Final Session of the 
Court, 299 F.2d 1.) The final decision of the Court, Rosenzweig v. General 
Services Administration, 1961, 299 F.2d 22, was decided on Dec. 6, 
1961. A petition for rehearing was denied on Jan. 2, 1962, 
and a petition for writ of certiorari to the Supreme Court of the United 
States was denied on Mar. 19, 1962, 82 S. Ct.&amp;nbsp;830. &lt;/p&gt;
&lt;p&gt;The order of Chief Judge Albert B. Maris, set forth in 299 F.2d 20,&amp;nbsp;provided: &lt;/p&gt;
&lt;p&gt;The business of this Court having been completed, it is ordered that at the
expiration of 30 days from this date, if a petition for certiorari has not 
been filed in the Supreme Court in Case No. 676 [Rosenzweig v. General 
Services Administration], just decided, the acting clerk shall deliver the 
records and papers of the Court in his office to the General Services 
Administration for permanent custody as records of the Government, 
and shall thereupon inform the Chief Justice of the United States that the 
work of the Court has been completed and that the designations of the judges
 of the Court may therefore appropriately be&amp;nbsp;terminated. &lt;/p&gt;
&lt;p&gt;If a petition for certiorari is filed in Case No. 676 this order shall take
effect and be carried out at the expiration of 30 days after the final 
disposition of Case No.&amp;nbsp;676.&lt;/p&gt;
&lt;p&gt;In accordance with the terms of this order, the petition for certiorari 
having been filed, and denied Mar. 19, 1962, the Court terminated on Apr. 18,&amp;nbsp;1962.&amp;#8221; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pretty fantastic research. And for free! Thanks &lt;span class="caps"&gt;LOC&lt;/span&gt;.&lt;/p&gt;</summary><category term="loc"></category><category term="law"></category><category term="history"></category><category term="CourtListener"></category><category term="api"></category></entry><entry><title>Changes and Plans at CourtListener.com</title><link href="https://michaeljaylissner.com/posts/2010/11/04/changes-and-plans-at-courtlistener/" rel="alternate"></link><updated>2010-11-04T23:30:21-07:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2010-11-04:posts/2010/11/04/changes-and-plans-at-courtlistener/</id><summary type="html">&lt;p&gt;A few weeks ago, we made a fairly major change at CourtListener.com to include 
&lt;span class="caps"&gt;ID&lt;/span&gt; numbers in all of our case URLs. This change meant that links that were 
previously like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//courtlistener.com/scotus/Wong-v.-Smith/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Are now like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//courtlistener.com/scotus/V5o/wong-v-smith/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Most of the old links should continue to work, but using the new links should 
be much faster and more reliable. The major difference between the two is the 
&lt;span class="caps"&gt;ID&lt;/span&gt; number, which is encoded as a set of numbers (in this case &lt;em&gt;V5o&lt;/em&gt;). This 
&lt;span class="caps"&gt;ID&lt;/span&gt; corresponds directly with the &lt;span class="caps"&gt;ID&lt;/span&gt; number in our database, aiding us greatly 
in serving up cases quickly and&amp;nbsp;accurately.&lt;/p&gt;
&lt;p&gt;Around the same time as this change, we added social networking links to all 
of our case pages to make them easier to share with friends and colleagues. 
These links use our new tiny domain, &lt;em&gt;http://crt.li/&lt;/em&gt;, and should thus be 
ideal for websites like Twitter or&amp;nbsp;Reddit.&lt;/p&gt;
&lt;p&gt;In the next few months we will be getting a major new server, and will be 
migrating our data to it. This will allow us to serve more data, 
and&amp;mdash;drum roll please&amp;mdash;will allow us to begin serving audio content 
on the site. That&amp;#8217;s right, in the next few months, we will begin getting oral 
arguments from the circuit courts, and will be serving it directly to you on 
the case&amp;nbsp;pages. &lt;/p&gt;
&lt;p&gt;We also have plans to revisit our search interface in order to add date 
filtering and query building so look for that&amp;nbsp;soon.&lt;/p&gt;
&lt;p&gt;As always, we welcome your feedback and support, so don&amp;#8217;t hesitate to get in 
touch with us if you have any questions or&amp;nbsp;suggestions.&lt;/p&gt;</summary><category term="CourtListener"></category><category term="Web Architecture"></category><category term="database"></category></entry><entry><title>Announcing CourtListener.com</title><link href="https://michaeljaylissner.com/posts/2010/05/01/announcing-courtlistener/" rel="alternate"></link><updated>2010-05-01T20:08:16-07:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2010-05-01:posts/2010/05/01/announcing-courtlistener/</id><summary type="html">&lt;p&gt;I&amp;#8217;m elated to announce today that I am officially taking the ropes of my 
final project and letting it loose into the wild. It&amp;#8217;s been seven months 
since development on it officially started and finally, 
the beta version is done and &lt;a href="https://michaeljaylissner.com/pdfs/courtlistener-final-report.pdf"&gt;the report&lt;/a&gt; is&amp;nbsp;released.&lt;/p&gt;
&lt;p&gt;If you haven&amp;#8217;t been following along, the &lt;a href="http://courtlistener.com"&gt;project 
itself&lt;/a&gt; is an open source legal research tool which allows anybody to 
keep up to date with federal precedents as they are set by the 13 Federal 
Circuit courts. Right now, it has &lt;a href="http://courtlistener.com/coverage/"&gt;more 
than 130,000 documents in its corpus&lt;/a&gt;, 
including almost all of the Supreme Court record dating back to 1754. Every 
day it downloads the latest documents within about a half hour of when 
each court publishes&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;One thing we&amp;#8217;ve focused on while building the site has making it as useful 
as possible for as many people as possible. Since not everybody likes 
getting updates in their inbox, we&amp;#8217;ve also tied the search engine in with 
an Atom feed generator so that you can search for whatever you want, 
and then follow updates in your feed&amp;nbsp;reader.&lt;/p&gt;
&lt;p&gt;Everything we&amp;#8217;ve built uses a powerful boolean search engine on the backend. 
At present, there are &lt;a href="https://www.courtlistener.com/search/advanced-techniques/"&gt;a ton of boolean connectors&lt;/a&gt; that you can use on our 
site to search our corpus or create alerts and feeds. Unlike full text search 
that most people are familiar with, boolean search allows incredibly complex 
queries, such as every document mentioning Attorney General Holder that is 
published in the Third Circuit of Appeals (&lt;a href="http://courtlistener.com/search/results/?q=%40court+ca3+%40doctext+holder&amp;amp;search="&gt;@court ca3 @doctext holder&lt;/a&gt;), 
or perhaps every document that mentions &amp;#8220;Roe&amp;#8221; and &amp;#8220;Wade&amp;#8221; within ten words of 
each other (&lt;a href="http://courtlistener.com/search/results/?q=%40doctext+%22roe+wade%22~10&amp;amp;search="&gt;@doctext &amp;#8220;roe wade&amp;#8221;~10&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;But that&amp;#8217;s not all. Because we also want you to be able to use this 
efficiently during your day-to-day searching, 
we&amp;#8217;ve built an &lt;a href="http://courtlistener.com/tools/"&gt;add-on that will 
work in most browsers&lt;/a&gt;, which allows you to search CourtListener.com 
without first going to our&amp;nbsp;homepage.&lt;/p&gt;
&lt;p&gt;You can also browse all of documents in our corpus, 
or you can go to the details page for an opinion, where you can read the 
text of its body without having to download a &lt;span class="caps"&gt;PDF&lt;/span&gt; and crank up Adobe&amp;nbsp;Acrobat.&lt;/p&gt;
&lt;p&gt;As I mentioned earlier, this project has been designed as an open source 
project, so if you&amp;#8217;re looking for something to contribute to, 
look no further. We have a very active &lt;a href="https://github.com/freelawproject/courtlistener/issues"&gt;bug list&lt;/a&gt; where you can dip your 
toes in, or if you prefer something meatier, we can cook something up 
specifically for&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve greatly enjoyed working on this project so far, 
and I&amp;#8217;d love to get more people using it, working on it, 
and recommending it to their friends. We&amp;#8217;re already planning version 1.0, 
so drop me a line if you&amp;#8217;re interested in helping out, otherwise, &lt;a href="https://www.courtlistener.com"&gt;go check it 
out already&lt;/a&gt;, and see all that it has to&amp;nbsp;offer!&lt;/p&gt;</summary><category term="Final Project"></category><category term="CourtListener"></category><category term="announcements"></category></entry><entry><title>Converting PDF Files to HTML</title><link href="https://michaeljaylissner.com/posts/2010/02/06/converting-pdf-files-to-html/" rel="alternate"></link><updated>2010-02-06T15:03:18-08:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2010-02-06:posts/2010/02/06/converting-pdf-files-to-html/</id><summary type="html">&lt;p&gt;For my final project, we are considering posting court cases on our site, and so I did some work today analyzing how best to convert the &lt;span class="caps"&gt;PDF&lt;/span&gt; files the courts give us to &lt;span class="caps"&gt;HTML&lt;/span&gt; that people can actually use. I looked briefly at google docs, since it has an amazing tool that converts &lt;span class="caps"&gt;PDF&lt;/span&gt; files to something resembling text, but short of spending a few days hacking the site, I couldn&amp;#8217;t figure out any easy way to leverage their technology in any sort of automated&amp;nbsp;way. &lt;/p&gt;
&lt;p&gt;The other two tools I have looked at today are &lt;a href="http://www.foolabs.com/xpdf/"&gt;pdftotext&lt;/a&gt; and &lt;a href="http://pdftohtml.sourceforge.net/"&gt;pdftohtml&lt;/a&gt;, which, not surprisingly, do what their names claim they do. Since we&amp;#8217;re going to be pulling cases from the 13 federal circuit courts, I wanted to figure out which method works best for which court, and which method will provide us with the most generalizable solution across whatever &lt;span class="caps"&gt;PDF&lt;/span&gt; a court may crank&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;The short version is that the best option seems to&amp;nbsp;be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pdftotext -htmlmeta -layout -enc &lt;span class="s1"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt; yourfile.pdf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates an html file with the text of the case laid out best as possible, some basic html meta data applied, and the &lt;span class="caps"&gt;UTF&lt;/span&gt;-8 encoding&amp;nbsp;applied. &lt;/p&gt;
&lt;p&gt;Before coming to this conclusion though, I looked at two settings that pdftohtml has. With the -c argument, it can generate a &amp;#8216;complex&amp;#8217; &lt;span class="caps"&gt;HTML&lt;/span&gt; document that closely resembles that of the original. Without the -c argument, it will create a more simple document. Although the complex documents are rather impressive in appearance, they&amp;#8217;re abysmal when it comes to the quality of the &lt;span class="caps"&gt;HTML&lt;/span&gt; code that is generated. For an example, look at the source code for this &lt;a href="/archive/shared/pdf-to-html-test/pdftohtml-complex-noframes-noimages-2ndCircuit-08-6301-cv_opn.html"&gt;this file&lt;/a&gt;. If, on the other hand, the -c argument is not run, and the simple documents are generated, the appearance of the final product is worse than the simple text documents that are created by pdftotext. Check out &lt;a href="/archive/shared/pdf-to-html-test/pdftohtml-simple-noframes-noimages-2ndCircuit-08-6301-cv_opn.html"&gt;this one&lt;/a&gt; for&amp;nbsp;example.&lt;/p&gt;
&lt;p&gt;For thoroughness, here is a table containing the results from this test.
&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;Court&lt;/th&gt;
  &lt;th&gt;pdftotext&lt;/th&gt;
  &lt;th&gt;pdftohtml complex&lt;/th&gt;
  &lt;th&gt;pdftotext simple&lt;/th&gt;
  &lt;th&gt;Original &lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;1&lt;sup&gt;st&lt;/sup&gt;&lt;/td&gt;
  &lt;td colspan="4" align="center"&gt;The first circuit publishes in &lt;span class="caps"&gt;HTML&lt;/span&gt; Format by default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;2&lt;sup&gt;nd&lt;/sup&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-2ndCircuit-08-6301-cv_opn.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-2ndCircuit-08-6301-cv_opn.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-2ndCircuit-08-6301-cv_opn.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/2ndCircuit-08-6301-cv_opn.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;3&lt;sup&gt;rd&lt;/sup&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-3rdCircuit-091225p.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-3rdCircuit-091225p.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-3rdCircuit-091225p.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/3rdCircuit-091225p.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;4&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-4thCircuit-082373.P.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-4thCircuit-082373.P.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-4thCircuit-082373.P.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/4thCircuit-082373.P.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;5&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-5thCircuit-07-30815-CR0.wpd.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-5thCircuit-07-30815-CR0.wpd.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-5thCircuit-07-30815-CR0.wpd.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/5thCircuit-07-30815-CR0.wpd.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;6&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-6thCircuit-10a0023p-06.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-6thCircuit-10a0023p-06.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-6thCircuit-10a0023p-06.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/6thCircuit-10a0023p-06.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;7&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-7thCircuit-UZ1FFY4T.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-7thCircuit-UZ1FFY4T.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-7thCircuit-UZ1FFY4T.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/7thCircuit-UZ1FFY4T.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;8&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-8thCircuit-071306U.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-8thCircuit-071306U.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-8thCircuit-071306U.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/8thCircuit-071306U.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;9&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-9thCircuit-07-55393.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-9thCircuit-07-55393.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-9thCircuit-07-55393.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/9thCircuit-07-55393.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;10&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-10thCircuit-06-6247.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-10thCircuit-06-6247.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-10thCircuit-06-6247.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/10thCircuit-06-6247.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;11&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-11thCircuit-200814991.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-11thCircuit-200814991.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-11thCircuit-200814991.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/11thCircuit-200814991.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;span class="caps"&gt;DC&lt;/span&gt; Circuit&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-DC-Circuit-07-3125-1229519.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-DC-Circuit-07-3125-1229519.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-DC-Circuit-07-3125-1229519.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/DC-Circuit-07-3125-1229519.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Federal Circuit&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftotext-layout-htmlmeta-utf-8-FederalCircuit-09-1361.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-complex-noframes-noimages-FederalCircuit-09-1361.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/pdftohtml-simple-noframes-noimages-FederalCircuit-09-1361.html"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a href="https://michaeljaylissner.com/archive/pdf-to-html-test/FederalCircuit-09-1361.pdf"&gt;&lt;em&gt;link&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A caveat regarding pdftotext:&lt;/strong&gt; This library is developed by a company called &lt;a href="http://www.glyphandcog.com/index.html"&gt;Glyph &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Cog&lt;/a&gt;. Although the code is open source, I couldn&amp;#8217;t for the life of me figure out how to file a bug against it. This doesn&amp;#8217;t particularly bode well for using something as a dependency. On the flip side, Glyph &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Cog is happy to provide support for the&amp;nbsp;product.&lt;/p&gt;</summary><category term="pdftotext"></category><category term="pdftohtml"></category><category term="pdf"></category><category term="Final Project"></category><category term="CourtListener"></category></entry><entry><title>How to Protect Your Open Source Code from Theft and a Mercurial Hook to Help</title><link href="https://michaeljaylissner.com/posts/2010/01/15/how-to-protect-your-open-source-code-from-theft-and-a-mercurial-hook-to-help/" rel="alternate"></link><updated>2010-01-15T10:27:18-08:00</updated><author><name>Mike Lissner</name></author><id>tag:michaeljaylissner.com,2010-01-15:posts/2010/01/15/how-to-protect-your-open-source-code-from-theft-and-a-mercurial-hook-to-help/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Updated, 2010-01-24:&lt;/strong&gt; Some edits regarding the Affero license (thanks to
Brian at &lt;a href="http://cyberlawcases.com/"&gt;http://cyberlawcases.com&lt;/a&gt; for the&amp;nbsp;corrections).&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve finally begun doing some of the actual coding for &lt;a href="http://www.ischool.berkeley.edu/programs/masters/projects/2010/judicialnlp"&gt;my final 
project&lt;/a&gt; so the time has come to set up &lt;a href="https://github.com/freelawproject/courtlistener"&gt;a mercurial repository&lt;/a&gt; to 
hold the&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Once we complete our project, we will have built a free product that 
competes with some of the core functionality of both LexisNexis and 
Westlaw, so something we wanted to do was make sure they couldn&amp;#8217;t steal our
code, enhance their product and thus moot&amp;nbsp;ours.&lt;/p&gt;
&lt;p&gt;To achieve this, we&amp;#8217;re using the &lt;a href="http://www.gnu.org/licenses/agpl.html"&gt;&lt;span class="caps"&gt;GNU&lt;/span&gt; Affero General Public License 
v3&lt;/a&gt;, which allows people to take our code for free, but requires that they 
publicly share any modifications that they make to the code. The normal &lt;span class="caps"&gt;GNU&lt;/span&gt; 
General Public License allows the code to be used at no cost, 
but only requires that changes to the code be shared with the public if one
distributes the changed version to the public. With a server-based 
project, like ours, one could operate modified versions of the code 
without ever having a need to distribute any of the software to the public. 
This loophole is closed by the Affero&amp;nbsp;license.&lt;/p&gt;
&lt;p&gt;In order to license our work, we must be its copyright holder. This is easy
enough, since we get copyright instantly in the U.S., but, 
as has been demonstrated in &lt;a href="http://en.wikipedia.org/wiki/Jacobsen_v._Katzer"&gt;Jacobsen v. Katzer&lt;/a&gt;, in order to seek remedies 
for copyright violations, we would have to register everything we made with 
the copyright office. This &lt;a href="http://www.copyright.gov/docs/fees.html"&gt;costs $35&lt;/a&gt; per registration, 
and with open source software, it&amp;#8217;s not clear whether each and every 
version needs to be registered or just major releases, or&amp;nbsp;what. &lt;/p&gt;
&lt;p&gt;Since this is too onerous to be practical, an additional approach to 
protecting our works is useful, and in the &lt;span class="caps"&gt;DMCA&lt;/span&gt; (&lt;a href="http://www.copyright.gov/title17/92chap5.html#506"&gt;17 &lt;span class="caps"&gt;U.S.C.&lt;/span&gt;§ 506(d)&lt;/a&gt;), 
remedies are provided for the &amp;#8220;fraudulent removal of copyright notice.&amp;#8221; 
Although these do not (in any way) match the protections provided by normal
copyright registration, they are a useful place to begin. Thus, 
if we place a copyright notice into each file of our code, 
those using our code must either risk violating the &lt;span class="caps"&gt;DMCA&lt;/span&gt; by removing these
notices, or leave our copyright information intact. (Placing such notices
in each file is also &lt;a href="http://www.fsf.org/licensing/licenses/gpl-howto.html"&gt;the recommendation&lt;/a&gt; of the Free Software&amp;nbsp;Foundation.)&lt;/p&gt;
&lt;p&gt;To place our information into each and every file of code that we upload 
publicly, I wrote &lt;a href="https://michaeljaylissner.com/archive/checklicense.py"&gt;a short mercurial hook&lt;/a&gt; that  adds copyright and 
licensing information it to the top of every file that is modified or added 
to the repository. To use the script, simply make it executable, 
place it in the .hg directory of your project, and add the following lines
to&amp;nbsp;.hg/hgrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[hooks]
pretxncommit = .hg/checklicense.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A couple of things I should note about this script is that it currently 
only checks for java and python files, and that it requires files called 
java_license.txt and python_license.txt to be in the root of your 
repository. It should be fairly easy to modify though to fit your own&amp;nbsp;needs.&lt;/p&gt;</summary><category term="mercurial"></category><category term="hook"></category><category term="Final Project"></category><category term="DMCA"></category><category term="copyright"></category><category term="Affero GPLv3"></category><category term="CourtListener"></category></entry></feed>